diff --git a/client/src/pages/dashboard/TutorUsuarios.tsx b/client/src/pages/dashboard/TutorUsuarios.tsx
index 6f9b1c78b0b755bb4a4483191e6ad23ece3c0e0f..f074f7159efc49afb0da7d97f3fd7ceeae07c8bf 100644
--- a/client/src/pages/dashboard/TutorUsuarios.tsx
+++ b/client/src/pages/dashboard/TutorUsuarios.tsx
@@ -32,86 +32,103 @@ const TutorUsuarios: React.FC = () => {
   const [editar, setEditar] = useState(false);
   const [selected, setSelected] = useState<any>(null);
 
   const [formData, setFormData] = useState({
     email: '',
     nombre: '',
     apellidos: '',
     rol: user?.rol === 'profesor' ? 'participante' : 'residente',
     hospital: user?.hospital?._id || ''
   });
 
   const [snackbar, setSnackbar] = useState({
     open: false,
     message: '',
     severity: 'success' as 'success' | 'error'
   });
   const [downloadLoading, setDownloadLoading] = useState(false);
   const [anchorElInforme, setAnchorElInforme] = useState<null | HTMLElement>(null);
   const [menuUsuario, setMenuUsuario] = useState<any>(null);
 
   const [selectedRoles, setSelectedRoles] = useState<string[]>([]);
   const [selectedHospitals, setSelectedHospitals] = useState<string[]>([]);
   const [selectedZonas, setSelectedZonas] = useState<string[]>([]);
   const [selectedEspecialidades, setSelectedEspecialidades] = useState<string[]>([]);
   const [selectedTipos, setSelectedTipos] = useState<string[]>([]);
+  const [selectedFases, setSelectedFases] = useState<string[]>([]);
 
   const fetchUsuarios = useCallback(async () => {
     try {
       let res;
       if (user?.rol === 'csm') {
         res = await api.get('/users');
       } else if (user?.rol === 'profesor') {
         res = await api.get(`/users/profesor/${user._id}/participantes`);
       } else if (user?.hospital?._id) {
         res = await api.get(`/users/hospital/${user.hospital._id}`);
       }
       if (res) {
         const filtrados = res.data.data.filter(
           (u: any) => u._id !== user?._id && u.tipo === user?.tipo
         );
         const usuariosConProgreso = await Promise.all(
           filtrados.map(async (u: any) => {
             let fasesCirugia: FaseCirugia[] = [];
+            let faseActual: string | undefined;
             if (["residente", "participante"].includes(u.rol)) {
               try {
                 const progRes = await api.get(`/progreso/residente/${u._id}`);
-                fasesCirugia = progRes.data.data
+                const progresos = progRes.data.data;
+                fasesCirugia = progresos
                   .filter(
                     (p: any) =>
                       p.estadoGeneral === "validado" &&
                       p.actividades.some(
                         (a: any) =>
                           a.tipo === "cirugia" && a.estado === "validado",
                       ),
                   )
                   .map((p: any) => ({ id: p._id, fase: p.fase.nombre }));
+
+                const enProgreso = progresos.filter(
+                  (p: any) => p.estadoGeneral === "en progreso",
+                );
+                if (enProgreso.length > 0) {
+                  faseActual = String(
+                    Math.max(...enProgreso.map((p: any) => p.fase.numero)),
+                  );
+                } else if (
+                  progresos.length > 0 &&
+                  progresos.every((p: any) => p.estadoGeneral === "validado")
+                ) {
+                  faseActual = "Programa Completado";
+                }
               } catch {
                 fasesCirugia = [];
               }
             }
-            return { ...u, fasesCirugia };
+            return { ...u, fasesCirugia, faseActual };
           }),
         );
         setUsuarios(usuariosConProgreso);
       }
     } catch (err: any) {
       setError(err.response?.data?.error || t('tutorUsers.loadError'));
     } finally {
       setLoading(false);
     }
   }, [user?._id, user?.hospital?._id, user?.rol, user?.tipo, t]);
 
   useEffect(() => {
     fetchUsuarios();
   }, [fetchUsuarios]);
 
   const handleChange = (e: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }>) => {
     const { name, value } = e.target;
     setFormData({ ...formData, [name as string]: value });
   };
 
   const handleSubmit = async () => {
     try {
       setProcesando(true);
       
 
diff --git a/client/src/pages/dashboard/TutorUsuarios.tsx b/client/src/pages/dashboard/TutorUsuarios.tsx
index 6f9b1c78b0b755bb4a4483191e6ad23ece3c0e0f..f074f7159efc49afb0da7d97f3fd7ceeae07c8bf 100644
--- a/client/src/pages/dashboard/TutorUsuarios.tsx
+++ b/client/src/pages/dashboard/TutorUsuarios.tsx
@@ -224,72 +241,84 @@ const TutorUsuarios: React.FC = () => {
         .filter((u) => u.sociedad)
         .map((u) => [u.sociedad._id, u.sociedad]),
     ).values(),
   );
   const especialidadOptions = Array.from(
     new Set(
       usuarios
         .map((u) => u.especialidad)
         .filter((e): e is string => Boolean(e)),
     ),
   );
   const zonaOptions = Array.from(
     new Set(
       usuarios
         .map((u) => u.zona)
         .filter((z): z is string => Boolean(z)),
     ),
   );
   const tipoOptions = Array.from(
     new Set(
       usuarios
         .map((u) => u.tipo)
         .filter((t): t is string => Boolean(t)),
     ),
   );
+  const faseOptions = Array.from(
+    new Set(
+      usuarios
+        .map((u) => u.faseActual)
+        .filter((f): f is string => Boolean(f)),
+    ),
+  );
 
   const displayUsuarios = usuarios
     .filter((u) =>
       selectedRoles.length > 0 ? selectedRoles.includes(u.rol) : true,
     )
     .filter((u) =>
       selectedHospitals.length > 0
         ? selectedHospitals.includes(
             u.hospital?._id || u.sociedad?._id || '',
           )
         : true,
     )
     .filter((u) =>
       selectedZonas.length > 0 ? selectedZonas.includes(u.zona) : true,
     )
     .filter((u) =>
       selectedEspecialidades.length > 0
         ? selectedEspecialidades.includes(u.especialidad)
         : true,
     )
     .filter((u) =>
       selectedTipos.length > 0 ? selectedTipos.includes(u.tipo) : true,
+    )
+    .filter((u) =>
+      selectedFases.length > 0
+        ? selectedFases.includes(u.faseActual ?? '')
+        : true,
     );
 
   if (loading) return <LinearProgress />;
   if (error) return <Alert severity="error">{error}</Alert>;
 
   return (
     <Box sx={{ px: 3, py: 2 }}>
       <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>
         <Typography variant="h4">{t('tutorUsers.title')}</Typography>
         <Button
           variant="contained"
           color="primary"
           startIcon={<AddIcon />}
           onClick={() => {
             setEditar(false);
             setFormData({
               email: '',
               nombre: '',
               apellidos: '',
               rol: user?.rol === 'profesor' ? 'participante' : 'residente',
               hospital: user?.hospital?._id || ''
             });
             setOpenDialog(true);
           }}
         >
diff --git a/client/src/pages/dashboard/TutorUsuarios.tsx b/client/src/pages/dashboard/TutorUsuarios.tsx
index 6f9b1c78b0b755bb4a4483191e6ad23ece3c0e0f..f074f7159efc49afb0da7d97f3fd7ceeae07c8bf 100644
--- a/client/src/pages/dashboard/TutorUsuarios.tsx
+++ b/client/src/pages/dashboard/TutorUsuarios.tsx
@@ -312,50 +341,65 @@ const TutorUsuarios: React.FC = () => {
         />
         <Autocomplete
           multiple
           options={zonaOptions}
           value={selectedZonas}
           onChange={(e, newValue) =>
             setSelectedZonas(newValue as string[])
           }
           renderInput={(params) => (
             <TextField {...params} label={t('adminUsers.fields.zone')} />
           )}
           sx={{ minWidth: 200 }}
         />
         <Autocomplete
           multiple
           options={tipoOptions}
           value={selectedTipos}
           onChange={(e, newValue) =>
             setSelectedTipos(newValue as string[])
           }
           renderInput={(params) => (
             <TextField {...params} label={t('adminUsers.fields.type')} />
           )}
           sx={{ minWidth: 200 }}
         />
+        <Autocomplete
+          multiple
+          options={faseOptions}
+          value={selectedFases}
+          onChange={(e, newValue) =>
+            setSelectedFases(newValue as string[])
+          }
+          renderInput={(params) => (
+            <TextField
+              {...params}
+              label={t('adminUsers.fields.phase', 'Fase')}
+            />
+          )}
+          sx={{ minWidth: 200 }}
+        />
         {['tutor', 'csm'].includes(user?.rol || '') && (
           <>
             <Autocomplete
               multiple
               options={hospitalOptions}
               getOptionLabel={(o) => o.nombre}
               value={hospitalOptions.filter((h) =>
                 selectedHospitals.includes(h._id),
               )}
               onChange={(e, newValue) =>
                 setSelectedHospitals(newValue.map((h: any) => h._id))
               }
               renderInput={(params) => (
                 <TextField
                   {...params}
                   label={t('adminUsers.fields.hospital')}
                 />
               )}
               sx={{ minWidth: 200 }}
             />
             <Autocomplete
               multiple
               options={especialidadOptions}
               value={selectedEspecialidades}
               onChange={(e, newValue) =>
diff --git a/client/src/pages/dashboard/TutorUsuarios.tsx b/client/src/pages/dashboard/TutorUsuarios.tsx
index 6f9b1c78b0b755bb4a4483191e6ad23ece3c0e0f..f074f7159efc49afb0da7d97f3fd7ceeae07c8bf 100644
--- a/client/src/pages/dashboard/TutorUsuarios.tsx
+++ b/client/src/pages/dashboard/TutorUsuarios.tsx
@@ -384,80 +428,82 @@ const TutorUsuarios: React.FC = () => {
             }
             renderInput={(params) => (
               <TextField
                 {...params}
                 label={t('adminUsers.fields.society')}
               />
             )}
             sx={{ minWidth: 200 }}
           />
         )}
       </Box>
 
       <Paper>
         <TableContainer>
           <Table>
             <TableHead>
               <TableRow>
                 <TableCell>{t('tutorUsers.table.name')}</TableCell>
                 <TableCell>{t('tutorUsers.table.email')}</TableCell>
                 <TableCell>{t('adminUsers.table.type')}</TableCell>
                 <TableCell>{t('adminUsers.table.society')}</TableCell>
                 <TableCell>{t('adminUsers.table.role')}</TableCell>
                 <TableCell>{t('adminUsers.table.hospital')}</TableCell>
                 <TableCell>{t('adminUsers.table.specialty')}</TableCell>
                 <TableCell>{t('adminUsers.table.zone')}</TableCell>
+                <TableCell>{t('adminUsers.table.currentPhase', 'Fase Actual')}</TableCell>
                 <TableCell>{t('tutorUsers.table.status')}</TableCell>
                 <TableCell align="right">{t('tutorUsers.table.actions')}</TableCell>
               </TableRow>
             </TableHead>
             <TableBody>
               {displayUsuarios.map(usuario => (
                 <TableRow key={usuario._id}>
                   <TableCell>{usuario.nombre} {usuario.apellidos}</TableCell>
                   <TableCell>{usuario.email}</TableCell>
                   <TableCell>
                     {usuario.tipo ? t(`types.${typeKey(usuario.tipo)}`) : '-'}
                   </TableCell>
                   <TableCell>{usuario.sociedad?.titulo || '-'}</TableCell>
                   <TableCell>
                     <Chip
                       label={t(`roles.${usuario.rol}`)}
                       color={
                         usuario.rol === 'administrador'
                           ? 'primary'
                           : usuario.rol === 'tutor'
                           ? 'secondary'
                           : 'default'
                       }
                       size="small"
                       sx={getRoleChipSx(usuario.rol)}
                     />
                   </TableCell>
                   <TableCell>{usuario.hospital?.nombre || '-'}</TableCell>
                   <TableCell>{usuario.especialidad || '-'}</TableCell>
                   <TableCell>{usuario.zona || '-'}</TableCell>
+                  <TableCell>{usuario.faseActual || '-'}</TableCell>
                   <TableCell>
                     <Chip
                       label={t(
                         usuario.activo
                           ? 'tutorUsers.states.active'
                           : 'tutorUsers.states.inactive'
                       )}
                       color={usuario.activo ? 'success' : 'error'}
                       size="small"
                     />
                   </TableCell>
                   <TableCell align="right">
                     {usuario.fasesCirugia && usuario.fasesCirugia.length > 0 && (
                       <>
                         <Tooltip title="Descargar informes">
                           <IconButton
                             onClick={(e) => handleOpenInformeMenu(e, usuario)}
                             sx={{ mr: 1 }}
                           >
                             <DownloadIcon />
                           </IconButton>
                         </Tooltip>
                         <Menu
                           anchorEl={anchorElInforme}
                           open={
