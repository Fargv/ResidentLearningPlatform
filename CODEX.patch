diff --git a/client/src/pages/dashboard/AdminUsuarios.tsx b/client/src/pages/dashboard/AdminUsuarios.tsx
index a751b81934302ecf89a6429d7b81a126338e206f..02ab75f44f71ab8c37ee693aaa56979ba68d7dbf 100644
--- a/client/src/pages/dashboard/AdminUsuarios.tsx
+++ b/client/src/pages/dashboard/AdminUsuarios.tsx
@@ -243,53 +243,53 @@ const AdminUsuarios: React.FC = () => {
   const handleCloseCrearDialog = () => {
     setOpenCrearDialog(false);
   };
 
   const handleCloseInvitarDialog = () => {
     setOpenInvitarDialog(false);
   };
 
   const handleOpenEditarDialog = (usuario: any) => {
     setSelectedUsuario(usuario);
     setFormData({
       email: usuario.email,
       nombre: usuario.nombre,
       apellidos: usuario.apellidos,
       rol: usuario.rol,
       hospital: usuario.hospital?._id || "",
       especialidad: usuario.especialidad || "",
       tutor: usuario.tutor?._id || "",
       tipo: usuario.tipo || "",
       sociedad: usuario.sociedad?._id || "",
       zona: usuario.zona || "",
     });
     setOpenEditarDialog(true);
   };
 
-  const handleCloseEditarDialog = () => {
+  const handleCloseEditarDialog = (clearSelected = true) => {
     setOpenEditarDialog(false);
-    setSelectedUsuario(null);
+    if (clearSelected) setSelectedUsuario(null);
   };
 
   const handleOpenEliminarDialog = (usuario: any) => {
     setSelectedUsuario(usuario);
     setOpenEliminarDialog(true);
   };
 
   const handleCloseEliminarDialog = () => {
     setOpenEliminarDialog(false);
     setSelectedUsuario(null);
   };
 
   const handleOpenPasswordDialog = (usuario: any) => {
     setSelectedUsuario(usuario);
     setPasswordValue("");
     setOpenPasswordDialog(true);
   };
 
   const handleClosePasswordDialog = () => {
     setOpenPasswordDialog(false);
     setSelectedUsuario(null);
   };
 
   const handleChange = (
     e: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }>,
diff --git a/client/src/pages/dashboard/AdminUsuarios.tsx b/client/src/pages/dashboard/AdminUsuarios.tsx
index a751b81934302ecf89a6429d7b81a126338e206f..02ab75f44f71ab8c37ee693aaa56979ba68d7dbf 100644
--- a/client/src/pages/dashboard/AdminUsuarios.tsx
+++ b/client/src/pages/dashboard/AdminUsuarios.tsx
@@ -1188,51 +1188,51 @@ const AdminUsuarios: React.FC = () => {
           <Button
             onClick={handleCrear}
             variant="contained"
             color="success"
             disabled={
               procesando ||
               !formData.email ||
               !passwordValue ||
               !formData.nombre ||
               !formData.apellidos ||
               ((formData.rol === "residente" || formData.rol === "tutor") &&
                 !formData.hospital) ||
               ((formData.rol === "residente" || formData.rol === "tutor") &&
                 !formData.especialidad) ||
               (formData.rol === "csm" && !formData.zona)
             }
           >
             {procesando
               ? t("common.creating")
               : t("adminUsers.actions.create")}
           </Button>
         </DialogActions>
       </Dialog>
 
       {/* Diálogo para editar usuario */}
-      <Dialog open={openEditarDialog} onClose={handleCloseEditarDialog}>
+      <Dialog open={openEditarDialog} onClose={() => handleCloseEditarDialog()}>
         <DialogTitle>{t("adminUsers.edit.title")}</DialogTitle>
         <DialogContent>
           <TextField
             autoFocus
             margin="dense"
             id="nombre"
             name="nombre"
             label={t("adminUsers.fields.name")}
             type="text"
             fullWidth
             variant="outlined"
             value={formData.nombre}
             onChange={handleChange}
             required
             sx={{ mb: 2 }}
           />
           <TextField
             margin="dense"
             id="apellidos"
             name="apellidos"
             label={t("adminUsers.fields.surname")}
             type="text"
             fullWidth
             variant="outlined"
             value={formData.apellidos}
diff --git a/client/src/pages/dashboard/AdminUsuarios.tsx b/client/src/pages/dashboard/AdminUsuarios.tsx
index a751b81934302ecf89a6429d7b81a126338e206f..02ab75f44f71ab8c37ee693aaa56979ba68d7dbf 100644
--- a/client/src/pages/dashboard/AdminUsuarios.tsx
+++ b/client/src/pages/dashboard/AdminUsuarios.tsx
@@ -1338,69 +1338,75 @@ const AdminUsuarios: React.FC = () => {
             <TextField
               select
               margin="dense"
               id="tutor-edit"
               name="tutor"
               label={t("adminUsers.fields.tutor")}
               InputLabelProps={{ shrink: true }}
               fullWidth
               variant="outlined"
               value={formData.tutor}
               onChange={handleChange}
               SelectProps={{ native: true }}
               sx={{ mb: 2 }}
             >
               <option value="">{t("common.none")}</option>
               {tutores.map((tutor) => (
                 <option key={tutor._id} value={tutor._id}>
                   {tutor.nombre} {tutor.apellidos}
                   {tutor.especialidad ? ` (${tutor.especialidad})` : ""}
                 </option>
               ))}
             </TextField>
           )}
         </DialogContent>
         <DialogActions>
-          <Button onClick={handleCloseEditarDialog} color="primary">
+          <Button onClick={() => handleCloseEditarDialog()} color="primary">
             {t("common.cancel")}
           </Button>
-          {user?.rol === "administrador" && (
-            <Button
-              onClick={() => handleOpenPasswordDialog(selectedUsuario)}
-              color="secondary"
-              variant="outlined"
-            >
-              {t("adminUsers.actions.changePassword")}
-            </Button>
-          )}
-          <Button
-            onClick={() => handleOpenEliminarDialog(selectedUsuario)}
-            color="error"
-            variant="outlined"
-          >
-            {t("adminUsers.delete.title")}
-          </Button>
+          {user?.rol === "administrador" && (
+            <Button
+              onClick={() => {
+                handleOpenPasswordDialog(selectedUsuario);
+                handleCloseEditarDialog(false);
+              }}
+              color="secondary"
+              variant="outlined"
+            >
+              {t("adminUsers.actions.changePassword")}
+            </Button>
+          )}
+          <Button
+            onClick={() => {
+              handleOpenEliminarDialog(selectedUsuario);
+              handleCloseEditarDialog(false);
+            }}
+            color="error"
+            variant="outlined"
+          >
+            {t("adminUsers.delete.title")}
+          </Button>
           <Button
             onClick={handleEditar}
             color="primary"
             variant="contained"
             disabled={
               procesando ||
               !formData.nombre ||
               !formData.apellidos ||
               ((formData.rol === "residente" || formData.rol === "tutor") &&
                 !formData.hospital) ||
               ((formData.rol === "residente" || formData.rol === "tutor") &&
                 !formData.especialidad) ||
               (formData.rol === "csm" && !formData.zona)
             }
           >
             {procesando ? t("common.saving") : t("common.saveChanges")}
           </Button>
         </DialogActions>
       </Dialog>
 
       {/* Diálogo para eliminar usuario */}
       <Dialog open={openEliminarDialog} onClose={handleCloseEliminarDialog}>
         <DialogTitle>{t("adminUsers.delete.title")}</DialogTitle>
         <DialogContent>
           <DialogContentText>
diff --git a/client/src/pages/dashboard/TutorUsuarios.tsx b/client/src/pages/dashboard/TutorUsuarios.tsx
index 4aec74aa570fde250ae89d7a9cf9137b688d8fd2..3f66005fbe0f75e0e209fc4396a28aeeb7a41872 100644
--- a/client/src/pages/dashboard/TutorUsuarios.tsx
+++ b/client/src/pages/dashboard/TutorUsuarios.tsx
@@ -1,58 +1,61 @@
 
 import React, { useState, useEffect, useCallback } from 'react';
 import {
   Box, Typography, Paper, Button, TextField,
-  Dialog, DialogTitle, DialogContent, DialogActions,
+  Dialog, DialogTitle, DialogContent, DialogActions, DialogContentText,
   Table, TableBody, TableCell, TableContainer, TableHead, TableRow,
   IconButton, Chip, LinearProgress, Alert, Snackbar,
   Autocomplete, Tooltip, CircularProgress, Backdrop, Menu, MenuItem
 } from '@mui/material';
 import { Add as AddIcon, Edit as EditIcon, Delete as DeleteIcon, Download as DownloadIcon } from '@mui/icons-material';
 import { useAuth } from '../../context/AuthContext';
-import { useTranslation } from 'react-i18next';
-import api from '../../api';
+import { useTranslation, Trans } from 'react-i18next';
+import api, { updateUserPassword } from '../../api';
 import { getRoleChipSx } from '../../utils/roleChipColors';
 import { FaseCirugia } from '../../types/FaseCirugia';
 
 const TutorUsuarios: React.FC = () => {
   const { user } = useAuth();
   const { t } = useTranslation();
   const typeKey = (tipo?: string) =>
     tipo === 'Programa Sociedades'
       ? 'programaSociedades'
       : tipo === 'Programa Residentes'
       ? 'programaResidentes'
       : '';
   const [usuarios, setUsuarios] = useState<any[]>([]);
   const [loading, setLoading] = useState(true);
   const [error, setError] = useState<string | null>(null);
   const [procesando, setProcesando] = useState(false);
 
   const [openDialog, setOpenDialog] = useState(false);
   const [editar, setEditar] = useState(false);
   const [selected, setSelected] = useState<any>(null);
+  const [openEliminarDialog, setOpenEliminarDialog] = useState(false);
+  const [openPasswordDialog, setOpenPasswordDialog] = useState(false);
+  const [passwordValue, setPasswordValue] = useState('');
 
   const [formData, setFormData] = useState({
     email: '',
     nombre: '',
     apellidos: '',
     rol: user?.rol === 'profesor' ? 'participante' : 'residente',
     hospital: user?.hospital?._id || ''
   });
 
   const [snackbar, setSnackbar] = useState({
     open: false,
     message: '',
     severity: 'success' as 'success' | 'error'
   });
   const [downloadLoading, setDownloadLoading] = useState(false);
   const [anchorElInforme, setAnchorElInforme] = useState<null | HTMLElement>(null);
   const [menuUsuario, setMenuUsuario] = useState<any>(null);
 
   const [selectedRoles, setSelectedRoles] = useState<string[]>([]);
   const [selectedHospitals, setSelectedHospitals] = useState<string[]>([]);
   const [selectedZonas, setSelectedZonas] = useState<string[]>([]);
   const [selectedEspecialidades, setSelectedEspecialidades] = useState<string[]>([]);
   const [selectedTipos, setSelectedTipos] = useState<string[]>([]);
   const [selectedFases, setSelectedFases] = useState<string[]>([]);
 
diff --git a/client/src/pages/dashboard/TutorUsuarios.tsx b/client/src/pages/dashboard/TutorUsuarios.tsx
index 4aec74aa570fde250ae89d7a9cf9137b688d8fd2..3f66005fbe0f75e0e209fc4396a28aeeb7a41872 100644
--- a/client/src/pages/dashboard/TutorUsuarios.tsx
+++ b/client/src/pages/dashboard/TutorUsuarios.tsx
@@ -99,110 +102,164 @@ const TutorUsuarios: React.FC = () => {
                   faseActual = `${t('adminPhases.phase')} ${numero}`;
                 } else if (
                   progresos.length > 0 &&
                   progresos.every((p: any) => p.estadoGeneral === "validado")
                 ) {
                   faseActual = "Programa Completado";
                 }
               } catch {
                 fasesCirugia = [];
               }
             }
             return { ...u, fasesCirugia, faseActual };
           }),
         );
         setUsuarios(usuariosConProgreso);
       }
     } catch (err: any) {
       setError(err.response?.data?.error || t('tutorUsers.loadError'));
     } finally {
       setLoading(false);
     }
   }, [user?._id, user?.hospital?._id, user?.rol, user?.tipo, t]);
 
   useEffect(() => {
     fetchUsuarios();
-  }, [fetchUsuarios, t]);
+  }, [fetchUsuarios, t]);
+
+  const handleCloseEditarDialog = (clearSelected = true) => {
+    setOpenDialog(false);
+    if (clearSelected) setSelected(null);
+  };
 
   const handleChange = (e: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }>) => {
     const { name, value } = e.target;
     setFormData({ ...formData, [name as string]: value });
   };
 
   const handleSubmit = async () => {
     try {
       setProcesando(true);
       
 
       if (editar && selected) {
         const res = await api.put(`/users/${selected._id}`, formData);
         setUsuarios(usuarios.map(u => u._id === selected._id ? res.data.data : u));
       } else {
         const res = await api.post('/users/invite', formData);
         setUsuarios([...usuarios, res.data.data]);
       }
 
-      setOpenDialog(false);
+      handleCloseEditarDialog();
       setSnackbar({
         open: true,
         message: editar ? t('tutorUsers.updated') : t('tutorUsers.invited'),
         severity: 'success'
       });
 
     } catch (err: any) {
       setSnackbar({
         open: true,
         message: err.response?.data?.error || t('tutorUsers.error'),
         severity: 'error'
       });
     } finally {
       setProcesando(false);
     }
   };
 
   const handleDelete = async (usuarioId: string) => {
     try {
       setProcesando(true);
       await api.delete(`/users/${usuarioId}`);
 
       setUsuarios(usuarios.filter(u => u._id !== usuarioId));
       setSnackbar({
         open: true,
         message: t('tutorUsers.deleted'),
         severity: 'success'
       });
     } catch (err: any) {
       setSnackbar({
         open: true,
         message: err.response?.data?.error || t('tutorUsers.deleteError'),
         severity: 'error'
       });
     } finally {
       setProcesando(false);
     }
   };
 
+  const handleOpenEliminarDialog = (usuario: any) => {
+    setSelected(usuario);
+    setOpenEliminarDialog(true);
+  };
+
+  const handleCloseEliminarDialog = () => {
+    setOpenEliminarDialog(false);
+    setSelected(null);
+  };
+
+  const handleConfirmEliminar = async () => {
+    if (!selected) return;
+    await handleDelete(selected._id);
+    handleCloseEliminarDialog();
+  };
+
+  const handleOpenPasswordDialog = (usuario: any) => {
+    setSelected(usuario);
+    setOpenPasswordDialog(true);
+  };
+
+  const handleClosePasswordDialog = () => {
+    setOpenPasswordDialog(false);
+    setPasswordValue('');
+    setSelected(null);
+  };
+
+  const handleActualizarPassword = async () => {
+    if (!selected) return;
+    try {
+      setProcesando(true);
+      await updateUserPassword(selected._id, passwordValue);
+      handleClosePasswordDialog();
+      setSnackbar({
+        open: true,
+        message: t('adminUsers.passwordUpdated'),
+        severity: 'success'
+      });
+    } catch (err: any) {
+      setSnackbar({
+        open: true,
+        message: err.response?.data?.error || t('adminUsers.passwordError'),
+        severity: 'error'
+      });
+    } finally {
+      setProcesando(false);
+    }
+  };
+
   const handleDownloadInforme = async (
     progresoId: string,
     fase: string,
     nombreUsuario: string,
   ) => {
     setDownloadLoading(true);
     try {
       const res = await api.get(`/informe-cirugias/${progresoId}`, {
         responseType: 'blob',
       });
       const url = window.URL.createObjectURL(new Blob([res.data]));
       const link = document.createElement('a');
       link.href = url;
       link.setAttribute('download', `informe-${fase}_${nombreUsuario}.xlsx`);
       document.body.appendChild(link);
       link.click();
       link.remove();
     } catch (err: any) {
       setSnackbar({
         open: true,
         message: err.response?.data?.error || t('tutorUsers.loadError'),
         severity: 'error',
       });
     } finally {
       setDownloadLoading(false);
diff --git a/client/src/pages/dashboard/TutorUsuarios.tsx b/client/src/pages/dashboard/TutorUsuarios.tsx
index 4aec74aa570fde250ae89d7a9cf9137b688d8fd2..3f66005fbe0f75e0e209fc4396a28aeeb7a41872 100644
--- a/client/src/pages/dashboard/TutorUsuarios.tsx
+++ b/client/src/pages/dashboard/TutorUsuarios.tsx
@@ -535,97 +592,160 @@ const TutorUsuarios: React.FC = () => {
                     )}
                     <IconButton
                       onClick={() => {
                         setEditar(true);
                         setSelected(usuario);
                         setFormData({
                           email: usuario.email,
                           nombre: usuario.nombre,
                           apellidos: usuario.apellidos,
                           rol: usuario.rol,
                           hospital: usuario.hospital?._id || ''
                         });
                         setOpenDialog(true);
                       }}
                     >
                       <EditIcon />
                     </IconButton>
                   </TableCell>
                 </TableRow>
               ))}
             </TableBody>
           </Table>
         </TableContainer>
       </Paper>
 
-      <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>
+      <Dialog open={openDialog} onClose={() => handleCloseEditarDialog()}>
         <DialogTitle>{t(editar ? 'tutorUsers.edit' : 'tutorUsers.invite')}</DialogTitle>
         <DialogContent>
           <TextField fullWidth margin="dense" label={t('tutorUsers.form.email')} name="email" value={formData.email} onChange={handleChange} />
           <TextField fullWidth margin="dense" label={t('tutorUsers.form.name')} name="nombre" value={formData.nombre} onChange={handleChange} />
           <TextField fullWidth margin="dense" label={t('tutorUsers.form.surname')} name="apellidos" value={formData.apellidos} onChange={handleChange} />
           <TextField
             select
             fullWidth
             margin="dense"
             label={t('tutorUsers.form.role')}
             name="rol"
             value={formData.rol}
             onChange={handleChange}
             slotProps={{ select: { native: true } }}
           >
             <option value="residente">{t('roles.residente')}</option>
             <option value="tutor">{t('roles.tutor')}</option>
           </TextField>
         </DialogContent>
         <DialogActions>
-          {editar && selected && (
-            <Button
-              color="error"
-              startIcon={<DeleteIcon />}
-              onClick={() => {
-                if (
-                  window.confirm(
-                    t('adminUsers.dialogs.deleteConfirm', {
-                      name: selected.nombre,
-                      lastName: selected.apellidos,
-                    }),
-                  )
-                ) {
-                  handleDelete(selected._id);
-                  setOpenDialog(false);
-                }
-              }}
-            >
-              {t('tutorUsers.buttons.delete')}
-            </Button>
-          )}
-          <Button onClick={() => setOpenDialog(false)}>{t('tutorUsers.dialog.cancel')}</Button>
+          <Button onClick={() => handleCloseEditarDialog()}>
+            {t('tutorUsers.dialog.cancel')}
+          </Button>
+          {editar && selected && (
+            <>
+              <Button
+                onClick={() => {
+                  handleOpenPasswordDialog(selected);
+                  handleCloseEditarDialog(false);
+                }}
+                color="secondary"
+                variant="outlined"
+              >
+                {t('adminUsers.actions.changePassword')}
+              </Button>
+              <Button
+                color="error"
+                startIcon={<DeleteIcon />}
+                onClick={() => {
+                  handleOpenEliminarDialog(selected);
+                  handleCloseEditarDialog(false);
+                }}
+              >
+                {t('tutorUsers.buttons.delete')}
+              </Button>
+            </>
+          )}
           <Button onClick={handleSubmit} variant="contained" disabled={procesando}>
-            {procesando
-              ? t('tutorUsers.dialog.saving')
-              : editar
-              ? t('tutorUsers.dialog.save')
-              : t('tutorUsers.dialog.invite')}
+            {procesando
+              ? t('tutorUsers.dialog.saving')
+              : editar
+              ? t('tutorUsers.dialog.save')
+              : t('tutorUsers.dialog.invite')}
+          </Button>
+        </DialogActions>
+      </Dialog>
+
+      <Dialog open={openPasswordDialog} onClose={handleClosePasswordDialog}>
+        <DialogTitle>{t('adminUsers.password.title')}</DialogTitle>
+        <DialogContent>
+          <TextField
+            fullWidth
+            margin="dense"
+            id="password-update"
+            label={t('adminUsers.password.label')}
+            type="password"
+            value={passwordValue}
+            onChange={(e) => setPasswordValue(e.target.value)}
+          />
+        </DialogContent>
+        <DialogActions>
+          <Button onClick={handleClosePasswordDialog} color="primary">
+            {t('common.cancel')}
+          </Button>
+          <Button
+            onClick={handleActualizarPassword}
+            color="secondary"
+            variant="contained"
+            disabled={procesando || !passwordValue}
+          >
+            {procesando
+              ? t('adminUsers.password.updating')
+              : t('adminUsers.password.update')}
+          </Button>
+        </DialogActions>
+      </Dialog>
+
+      <Dialog open={openEliminarDialog} onClose={handleCloseEliminarDialog}>
+        <DialogTitle>{t('adminUsers.delete.title')}</DialogTitle>
+        <DialogContent>
+          <DialogContentText>
+            <Trans
+              i18nKey="adminUsers.delete.confirm"
+              values={{
+                name: `${selected?.nombre} ${selected?.apellidos}`,
+              }}
+              components={{ strong: <strong /> }}
+            />
+          </DialogContentText>
+        </DialogContent>
+        <DialogActions>
+          <Button onClick={handleCloseEliminarDialog} color="primary">
+            {t('common.cancel')}
+          </Button>
+          <Button
+            onClick={handleConfirmEliminar}
+            color="error"
+            variant="contained"
+            disabled={procesando}
+          >
+            {procesando ? t('common.deleting') : t('common.delete')}
           </Button>
         </DialogActions>
       </Dialog>
 
       <Backdrop
         open={downloadLoading}
         sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}
       >
         <CircularProgress color="inherit" />
       </Backdrop>
       <Snackbar
         open={snackbar.open}
         autoHideDuration={6000}
         onClose={() => setSnackbar({ ...snackbar, open: false })}
       >
         <Alert severity={snackbar.severity}>{snackbar.message}</Alert>
       </Snackbar>
     </Box>
   );
 };
 
 export default TutorUsuarios;
 
