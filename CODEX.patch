diff --git a/tests/authControllerRegister.test.js b/tests/authControllerRegister.test.js
index 328966840d85e9f51bf603f9b2f728df7c4abd3d..f62c082b266b63eda631711633a752f022bde684 100644
--- a/tests/authControllerRegister.test.js
+++ b/tests/authControllerRegister.test.js
@@ -1,69 +1,71 @@
 const { register } = require('../src/controllers/authController');
 const User = require('../src/models/User');
 const Sociedades = require('../src/models/Sociedades');
+const Hospital = require('../src/models/Hospital');
 jest.mock('../src/models/AccessCode', () => {
   let docs = [];
   return {
     create: jest.fn(async (doc) => {
       docs.push({ ...doc });
       return doc;
     }),
     findOne: jest.fn(async (query) =>
       docs.find((d) => d.codigo === query.codigo) || null
     ),
     deleteMany: jest.fn(async () => {
       docs = [];
     })
   };
 });
 const AccessCode = require('../src/models/AccessCode');
 const { inicializarProgresoFormativo } = require('../src/utils/initProgreso');
 const ErrorResponse = require('../src/utils/errorResponse');
 
 jest.mock('../src/utils/initProgreso');
 
 describe('register access codes', () => {
   afterEach(async () => {
     jest.restoreAllMocks();
     await AccessCode.deleteMany();
   });
 
   test('ABEXFOR2025 asigna rol tutor y tipo Programa Residentes', async () => {
     const req = {
       body: {
         nombre: 'a',
         apellidos: 'b',
         email: 'a@b.com',
         password: '12345678',
         codigoAcceso: 'ABEXFOR2025',
         hospital: 'h1',
         consentimientoDatos: true
       }
     };
     const res = { status: jest.fn().mockReturnThis(), json: jest.fn() };
     await AccessCode.create({ codigo: 'ABEXFOR2025', rol: 'tutor', tipo: 'Programa Residentes' });
+    jest.spyOn(Hospital, 'findById').mockResolvedValue({ _id: 'h1', zona: 'NORTE' });
     jest.spyOn(User, 'findOne').mockResolvedValue(null);
     jest.spyOn(User, 'create').mockResolvedValue({ _id: 'u1', rol: 'tutor', tipo: 'Programa Residentes', hospital: 'h1' });
 
     await register(req, res, jest.fn());
 
     expect(User.create).toHaveBeenCalledWith(expect.objectContaining({ rol: 'tutor', tipo: 'Programa Residentes', hospital: 'h1' }));
     expect(res.status).toHaveBeenCalledWith(200);
     expect(AccessCode.findOne).toHaveBeenCalledWith({ codigo: 'ABEXFOR2025' });
   });
 
   test('ABEXSOCUSER2025 requiere sociedad', async () => {
     const req = {
       body: {
         nombre: 'a',
         apellidos: 'b',
         email: 'soc@a.com',
         password: '12345678',
         codigoAcceso: 'ABEXSOCUSER2025',
         consentimientoDatos: true
       }
     };
     await AccessCode.create({ codigo: 'ABEXSOCUSER2025', rol: 'participante', tipo: 'Programa Sociedades' });
     const next = jest.fn();
     await register(req, {}, next);
     expect(next).toHaveBeenCalledWith(expect.any(ErrorResponse));
diff --git a/tests/authControllerRegister.test.js b/tests/authControllerRegister.test.js
index 328966840d85e9f51bf603f9b2f728df7c4abd3d..f62c082b266b63eda631711633a752f022bde684 100644
--- a/tests/authControllerRegister.test.js
+++ b/tests/authControllerRegister.test.js
@@ -72,26 +74,105 @@ describe('register access codes', () => {
 
   test('ABEXSOCUSER2025 crea usuario de sociedad', async () => {
     const req = {
       body: {
         nombre: 'a',
         apellidos: 'b',
         email: 'soc@a.com',
         password: '12345678',
         codigoAcceso: 'ABEXSOCUSER2025',
         sociedad: 's1',
         consentimientoDatos: true
       }
     };
     const res = { status: jest.fn().mockReturnThis(), json: jest.fn() };
     await AccessCode.create({ codigo: 'ABEXSOCUSER2025', rol: 'participante', tipo: 'Programa Sociedades' });
     jest.spyOn(User, 'findOne').mockResolvedValue(null);
     jest.spyOn(Sociedades, 'findOne').mockResolvedValue({ _id: 's1', status: 'ACTIVO' });
     jest.spyOn(User, 'create').mockResolvedValue({ _id: 'u2', rol: 'participante', tipo: 'Programa Sociedades', sociedad: 's1' });
 
     await register(req, res, jest.fn());
 
     expect(User.create).toHaveBeenCalledWith(expect.objectContaining({ rol: 'participante', tipo: 'Programa Sociedades', sociedad: 's1' }));
     expect(inicializarProgresoFormativo).toHaveBeenCalled();
     expect(AccessCode.findOne).toHaveBeenCalledWith({ codigo: 'ABEXSOCUSER2025' });
   });
+
+  test('registro de residente con tutor disponible', async () => {
+    const req = {
+      body: {
+        nombre: 'r',
+        apellidos: 's',
+        email: 'r@s.com',
+        password: '12345678',
+        codigoAcceso: 'ABEXRES2025',
+        hospital: 'h1',
+        especialidad: 'URO',
+        tutor: 'ALL',
+        consentimientoDatos: true
+      }
+    };
+    const res = { status: jest.fn().mockReturnThis(), json: jest.fn() };
+    await AccessCode.create({ codigo: 'ABEXRES2025', rol: 'residente', tipo: 'Programa Residentes' });
+    jest.spyOn(Hospital, 'findById').mockResolvedValue({ _id: 'h1', zona: 'NORTE' });
+    jest
+      .spyOn(User, 'findOne')
+      .mockImplementationOnce(() => Promise.resolve(null))
+      .mockImplementationOnce(() => ({
+        select: jest.fn().mockResolvedValue({ _id: 't1' })
+      }));
+    jest
+      .spyOn(User, 'create')
+      .mockResolvedValue({
+        _id: 'u3',
+        rol: 'residente',
+        tutor: 't1',
+        hospital: 'h1',
+        tipo: 'Programa Residentes',
+        especialidad: 'URO'
+      });
+
+    await register(req, res, jest.fn());
+
+    expect(User.create).toHaveBeenCalledWith(
+      expect.objectContaining({ rol: 'residente', tutor: 't1' })
+    );
+    expect(inicializarProgresoFormativo).toHaveBeenCalled();
+    expect(AccessCode.findOne).toHaveBeenCalledWith({ codigo: 'ABEXRES2025' });
+  });
+
+  test('registro sin tutor asigna tutor null', async () => {
+    const req = {
+      body: {
+        nombre: 'r2',
+        apellidos: 's2',
+        email: 'r2@s.com',
+        password: '12345678',
+        codigoAcceso: 'ABEXRES2026',
+        hospital: 'h1',
+        especialidad: 'URO',
+        consentimientoDatos: true
+      }
+    };
+    const res = { status: jest.fn().mockReturnThis(), json: jest.fn() };
+    await AccessCode.create({ codigo: 'ABEXRES2026', rol: 'residente', tipo: 'Programa Residentes' });
+    jest.spyOn(Hospital, 'findById').mockResolvedValue({ _id: 'h1', zona: 'NORTE' });
+    jest.spyOn(User, 'findOne').mockResolvedValue(null);
+    jest
+      .spyOn(User, 'create')
+      .mockResolvedValue({
+        _id: 'u4',
+        rol: 'residente',
+        tutor: null,
+        hospital: 'h1',
+        tipo: 'Programa Residentes',
+        especialidad: 'URO'
+      });
+
+    await register(req, res, jest.fn());
+
+    expect(User.create).toHaveBeenCalledWith(
+      expect.objectContaining({ rol: 'residente', tutor: null })
+    );
+    expect(AccessCode.findOne).toHaveBeenCalledWith({ codigo: 'ABEXRES2026' });
+  });
 });
diff --git a/tests/createUserAdmin.test.js b/tests/createUserAdmin.test.js
index addf45aaf6517ef19120711a934b39a484178665..18a341a4af715347069691083081b01bff561405 100644
--- a/tests/createUserAdmin.test.js
+++ b/tests/createUserAdmin.test.js
@@ -1,38 +1,72 @@
-const { createUser } = require('../src/controllers/userController');
 const User = require('../src/models/User');
 const Hospital = require('../src/models/Hospital');
 const Sociedades = require('../src/models/Sociedades');
 const { createAuditLog } = require('../src/utils/auditLog');
+const { inicializarProgresoFormativo } = require('../src/utils/initProgreso');
+const { resolveTutor } = require('../src/utils/resolveTutor');
 
 jest.mock('../src/utils/auditLog', () => ({ createAuditLog: jest.fn() }));
+jest.mock('../src/utils/initProgreso');
+jest.mock('../src/utils/resolveTutor', () => ({ resolveTutor: jest.fn() }));
+
+const { createUser } = require('../src/controllers/userController');
 
 describe('createUser - administrador', () => {
   afterEach(() => {
     jest.restoreAllMocks();
   });
 
   test('crea administrador sin tipo', async () => {
     jest.spyOn(User, 'create').mockResolvedValue({ _id: 'u1', rol: 'administrador' });
     const req = {
       body: {
         nombre: 'Admin',
         apellidos: 'Test',
         email: 'admin@test.com',
         password: 'pass',
         rol: 'administrador',
         tipo: 'invalido'
       },
       user: { _id: 'creator' },
       ip: '::1'
     };
     const res = { status: jest.fn().mockReturnThis(), json: jest.fn() };
 
     await createUser(req, res, jest.fn());
 
     expect(User.create).toHaveBeenCalledWith(
       expect.objectContaining({ rol: 'administrador', tipo: undefined })
     );
     expect(res.status).toHaveBeenCalledWith(201);
     expect(res.json).toHaveBeenCalledWith({ success: true, data: { _id: 'u1', rol: 'administrador' } });
   });
+
+  test('autoasigna tutor al crear residente sin especificarlo', async () => {
+    jest.spyOn(Hospital, 'findById').mockResolvedValue({ _id: 'h1', zona: 'NORTE' });
+    resolveTutor.mockResolvedValue('t1');
+    jest.spyOn(User, 'create').mockResolvedValue({ _id: 'u2', rol: 'residente', tutor: 't1' });
+    const req = {
+      body: {
+        nombre: 'Res',
+        apellidos: 'Test',
+        email: 'res@test.com',
+        password: 'pass',
+        rol: 'residente',
+        tipo: 'Programa Residentes',
+        hospital: 'h1',
+        especialidad: 'URO'
+      },
+      user: { _id: 'creator' },
+      ip: '::1'
+    };
+    const res = { status: jest.fn().mockReturnThis(), json: jest.fn() };
+
+    await createUser(req, res, jest.fn());
+
+    expect(resolveTutor).toHaveBeenCalledWith('ALL', 'h1', 'URO');
+    expect(User.create).toHaveBeenCalledWith(
+      expect.objectContaining({ rol: 'residente', tutor: 't1' })
+    );
+    expect(inicializarProgresoFormativo).toHaveBeenCalled();
+  });
 });
