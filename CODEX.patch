diff --git a/client/src/pages/dashboard/AdminUsuarios.test.tsx b/client/src/pages/dashboard/AdminUsuarios.test.tsx
index d9cf89f2dd7d64c1d79143b6e922fd232fd7438c..cdb65c8b247ad2f6866a439285ed724f930cf953 100644
--- a/client/src/pages/dashboard/AdminUsuarios.test.tsx
+++ b/client/src/pages/dashboard/AdminUsuarios.test.tsx
@@ -5,50 +5,78 @@ import AdminUsuarios from './AdminUsuarios';
 import { I18nextProvider } from 'react-i18next';
 import i18n from '../../i18n';
 
 jest.mock('../../api');
 jest.mock('../../context/AuthContext');
 jest.mock('react-router-dom', () => ({
   useNavigate: () => jest.fn()
 }));
 
 import api from '../../api';
 import { useAuth } from '../../context/AuthContext';
 
 const mockedUseAuth = useAuth as jest.MockedFunction<typeof useAuth>;
 const mockedGet = (api as any).get as jest.Mock;
 const mockedPut = (api as any).put as jest.Mock;
 
 beforeEach(() => {
   mockedUseAuth.mockReturnValue({ user: { rol: 'administrador' } } as any);
   i18n.changeLanguage('es');
 });
 
 afterEach(() => {
   jest.clearAllMocks();
 });
 
+test('muestra boton Ver Progreso cuando tiene progreso', async () => {
+  mockedGet
+    .mockResolvedValueOnce({
+      data: {
+        data: [
+          {
+            _id: 'u1',
+            nombre: 'Res',
+            apellidos: 'A',
+            email: 'r@a.com',
+            rol: 'residente',
+            tipo: 'Programa Residentes',
+            tieneProgreso: true,
+          },
+        ],
+      },
+    })
+    .mockResolvedValueOnce({ data: { data: [] } })
+    .mockResolvedValueOnce({ data: [] });
+
+  render(
+    <I18nextProvider i18n={i18n}>
+      <AdminUsuarios />
+    </I18nextProvider>
+  );
+  expect(await screen.findByText('Ver Progreso')).toBeInTheDocument();
+});
+
 test('muestra boton Crear progreso cuando no existe progreso', async () => {
   mockedGet
     .mockResolvedValueOnce({ data: { data: [
       { _id: 'u1', nombre: 'Res', apellidos: 'A', email: 'r@a.com', rol: 'residente', tipo: 'Programa Residentes', tieneProgreso: false }
     ] } })
     .mockResolvedValueOnce({ data: { data: [] } })
     .mockResolvedValueOnce({ data: [] });
 
   render(
     <I18nextProvider i18n={i18n}>
       <AdminUsuarios />
     </I18nextProvider>
   );
   expect(await screen.findByText('Crear progreso')).toBeInTheDocument();
 });
 
 test('no muestra boton cuando tiene progreso', async () => {
   mockedGet
     .mockResolvedValueOnce({ data: { data: [
       { _id: 'u1', nombre: 'Res', apellidos: 'A', email: 'r@a.com', rol: 'residente', tipo: 'Programa Residentes', tieneProgreso: true }
     ] } })
     .mockResolvedValueOnce({ data: { data: [] } })
     .mockResolvedValueOnce({ data: [] });
 
   render(
diff --git a/client/src/pages/dashboard/AdminUsuarios.tsx b/client/src/pages/dashboard/AdminUsuarios.tsx
index d771d6fe9a18f102b00a728dd858b0a2ea724f95..80679642f37c2ccbf4ce9b9a3a1283e3bf5dd6a8 100644
--- a/client/src/pages/dashboard/AdminUsuarios.tsx
+++ b/client/src/pages/dashboard/AdminUsuarios.tsx
@@ -18,60 +18,62 @@ import {
   TableHead,
   TableRow,
   Chip,
   LinearProgress,
   Alert,
   Snackbar,
   Autocomplete,
   IconButton,
   Tooltip,
   CircularProgress,
   Backdrop,
   Menu,
   MenuItem,
 } from "@mui/material";
 import {
   Add as AddIcon,
   Edit as EditIcon,
   Delete as DeleteIcon,
   VpnKey as VpnKeyIcon,
   Download as DownloadIcon,
 
    //Person as PersonIcon,
   //Email as EmailIcon
 } from "@mui/icons-material";
 import { useAuth } from "../../context/AuthContext";
+import { useNavigate } from "react-router-dom";
 import api, { createUser, updateUserPassword, getTutors } from "../../api";
 import InviteUsersMail from "../../components/InviteUsersMail";
 import BackButton from "../../components/BackButton";
 import { useTranslation, Trans } from "react-i18next";
 import { getRoleChipSx } from "../../utils/roleChipColors";
 import { FaseCirugia } from "../../types/FaseCirugia";
 
 const AdminUsuarios: React.FC = () => {
   const { user } = useAuth();
   const { t } = useTranslation();
+  const navigate = useNavigate();
   const typeKey = (tipo?: string) =>
     tipo === "Programa Sociedades"
       ? "programaSociedades"
       : tipo === "Programa Residentes"
       ? "programaResidentes"
       : "";
   const rolesResidentes = [
     "residente",
     "tutor",
     "csm",
     "administrador",
   ];
   const rolesSociedades = [
     "participante",
     "profesor",
     "csm",
     "administrador",
   ];
   const zonaOptions = [
     "NORDESTE",
     "NORTE",
     "CENTRO",
     "ANDALUCÍA",
     "PORTUGAL",
     "LEVANTE",
diff --git a/client/src/pages/dashboard/AdminUsuarios.tsx b/client/src/pages/dashboard/AdminUsuarios.tsx
index d771d6fe9a18f102b00a728dd858b0a2ea724f95..80679642f37c2ccbf4ce9b9a3a1283e3bf5dd6a8 100644
--- a/client/src/pages/dashboard/AdminUsuarios.tsx
+++ b/client/src/pages/dashboard/AdminUsuarios.tsx
@@ -888,50 +890,66 @@ const AdminUsuarios: React.FC = () => {
                     >
                       {t("adminUsers.actions.edit")}
                     </Button>
                     <Button
                       variant="outlined"
                       color="error"
                       onClick={() => handleOpenEliminarDialog(usuario)}
                       size="small"
                       startIcon={<DeleteIcon />}
                       sx={{ mr: 1, minWidth: 150 }}
                     >
                       {t("adminUsers.actions.delete")}
                     </Button>
                     {user?.rol === "administrador" && (
                       <Button
                         variant="outlined"
                         color="secondary"
                         onClick={() => handleOpenPasswordDialog(usuario)}
                         size="small"
                         startIcon={<VpnKeyIcon />}
                         sx={{ mr: 1, minWidth: 150 }}
                       >
                         {t("adminUsers.actions.changePassword")}
                       </Button>
                     )}
+                    {['residente', 'participante'].includes(usuario.rol) &&
+                      user?.rol === "administrador" &&
+                      usuario.tieneProgreso && (
+                        <Button
+                          variant="outlined"
+                          size="small"
+                          onClick={() =>
+                            navigate(
+                              `/dashboard/progreso-usuario/${usuario._id}`,
+                            )
+                          }
+                          sx={{ mr: 1, minWidth: 150 }}
+                        >
+                          {t('adminUserProgress.viewProgress')}
+                        </Button>
+                      )}
                     {['residente', 'participante'].includes(usuario.rol) &&
                       !usuario.tieneProgreso && (
                         <Button
                           variant="outlined"
                           onClick={() => handleCrearProgreso(usuario._id)}
                           size="small"
                           sx={{ mr: 1, minWidth: 150 }}
                         >
                           {t("adminUsers.actions.createProgress")}
                         </Button>
                       )}
                   </TableCell>
                 </TableRow>
               ))}
             </TableBody>
           </Table>
         </TableContainer>
       </Paper>
 
 
       {/* Diálogo para invitar usuario */}
       <InviteUsersMail
         open={openInvitarDialog}
         onClose={handleCloseInvitarDialog}
       />
