diff --git a/src/controllers/informesController.js b/src/controllers/informesController.js
index 729b9b120692eb4fbeee0b458ad6f254550e06cf..4661ccac5687b3a1c6f1b1fccaed852e67774cb1 100644
--- a/src/controllers/informesController.js
+++ b/src/controllers/informesController.js
@@ -1,41 +1,41 @@
 // src/controllers/informesController.js
 const path = require('path');
 const fs = require('fs');
 const ExcelJS = require('exceljs');
 const { Parser } = require('@json2csv/plainjs');
 
 const User = require('../models/User');
 const Fase = require('../models/Fase');
 const FaseSoc = require('../models/FaseSoc');
 const ProgresoResidente = require('../models/ProgresoResidente');
 
 /**
  * Exporta usuarios en CSV o XLSX.
  * GET /informes/usuarios?format=csv|xlsx
  */
-exports.exportarUsuarios = async (req, res, next) => {
+const exportarUsuarios = async (req, res, next) => {
   try {
     const usuarios = await User.find().lean();
 
     // Campos dinámicos según el primer documento (si lo hay)
     const fields = usuarios.length > 0 ? Object.keys(usuarios[0]) : [];
 
     // Filas para Excel (normalizando fechas y objetos)
     const rows = usuarios.map((usuario) =>
       fields.map((field) => {
         const value = usuario[field];
         if (value instanceof Date) return value.toISOString();
         if (typeof value === 'object' && value !== null) {
           return JSON.stringify(value);
         }
         return value;
       }),
     );
 
     const uploadDir = path.join(__dirname, '../../public/uploads');
     if (!fs.existsSync(uploadDir)) fs.mkdirSync(uploadDir, { recursive: true });
 
     const timestamp = Date.now();
     let filePath;
     let fileName;
 
diff --git a/src/controllers/informesController.js b/src/controllers/informesController.js
index 729b9b120692eb4fbeee0b458ad6f254550e06cf..4661ccac5687b3a1c6f1b1fccaed852e67774cb1 100644
--- a/src/controllers/informesController.js
+++ b/src/controllers/informesController.js
@@ -67,51 +67,51 @@ exports.exportarUsuarios = async (req, res, next) => {
 
       res.set(
         'Content-Type',
         'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
       );
     }
 
     res.download(filePath, fileName, (err) => {
       // Limpieza del temporal, ocurra o no error de envío
       fs.unlink(filePath, (unlinkErr) => {
         if (unlinkErr) {
           console.error('Error eliminando informe temporal', unlinkErr);
         }
       });
       if (err) next(err);
     });
   } catch (err) {
     next(err);
   }
 };
 
 /**
  * Exporta listado de Actividades por Fase (para residentes) en XLSX.
  * GET /informes/actividades-residentes
  */
-exports.exportarActividadesResidentes = async (req, res, next) => {
+const exportarActividadesResidentes = async (req, res, next) => {
   try {
     // Cargamos todas las fases con sus actividades
     const fases = await Fase.find().populate('actividades').lean();
 
     // Construimos filas: [Fase, Actividad]
     const rows = [];
     (fases || []).forEach((fase) => {
       const faseLabel = `${fase.numero} - ${fase.nombre}`;
       const acts = Array.isArray(fase.actividades) ? fase.actividades : [];
       if (acts.length === 0) {
         // Si una fase no tiene actividades, aún así registramos la fase con celda vacía de actividad
         rows.push([faseLabel, '']);
       } else {
         acts.forEach((act) => {
           rows.push([faseLabel, act?.nombre ?? '']);
         });
       }
     });
 
     const workbook = new ExcelJS.Workbook();
     const worksheet = workbook.addWorksheet('Actividades');
 
     worksheet.addTable({
       name: 'Actividades',
       ref: 'A1',
diff --git a/src/controllers/informesController.js b/src/controllers/informesController.js
index 729b9b120692eb4fbeee0b458ad6f254550e06cf..4661ccac5687b3a1c6f1b1fccaed852e67774cb1 100644
--- a/src/controllers/informesController.js
+++ b/src/controllers/informesController.js
@@ -135,51 +135,51 @@ exports.exportarActividadesResidentes = async (req, res, next) => {
     await workbook.xlsx.writeFile(filePath);
 
     res.set(
       'Content-Type',
       'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
     );
 
     // Enviamos como descarga y limpiamos el archivo temporal
     res.download(filePath, fileName, (err) => {
       fs.unlink(filePath, (unlinkErr) => {
         if (unlinkErr) {
           console.error('Error eliminando informe temporal', unlinkErr);
         }
       });
       if (err) next(err);
     });
   } catch (err) {
     next(err);
   }
 };
 
 /**
  * Exporta actividades del Programa Sociedades (CSV o XLSX).
  * GET /informes/actividades-sociedades?format=csv|xlsx
  */
-exports.exportarActividadesSociedades = async (req, res, next) => {
+const exportarActividadesSociedades = async (req, res, next) => {
   try {
     const { format } = req.query;
     const fases = await FaseSoc.find().populate('actividades').lean();
 
     // Construcción de filas con orden por fase.numero y act.orden
     const rows = [];
     (fases || [])
       .sort((a, b) => (a?.numero ?? 0) - (b?.numero ?? 0))
       .forEach((fase) => {
         const acts = Array.isArray(fase.actividades) ? fase.actividades : [];
         acts
           .sort((a, b) => (a?.orden ?? 0) - (b?.orden ?? 0))
           .forEach((act) => {
             rows.push({
               faseNumero: fase.numero,
               faseNombre: fase.nombre,
               faseDescripcion: fase.descripcion,
               actividadNombre: act?.nombre ?? '',
               actividadDescripcion: act?.descripcion ?? '',
               actividadTipo: act?.tipo ?? '',
               orden: act?.orden ?? '',
               requiereValidacion: !!act?.requiereValidacion,
               requiereFirma: !!act?.requiereFirma,
               requierePorcentaje: !!act?.requierePorcentaje,
               requiereAdjunto: !!act?.requiereAdjunto,
diff --git a/src/controllers/informesController.js b/src/controllers/informesController.js
index 729b9b120692eb4fbeee0b458ad6f254550e06cf..4661ccac5687b3a1c6f1b1fccaed852e67774cb1 100644
--- a/src/controllers/informesController.js
+++ b/src/controllers/informesController.js
@@ -249,51 +249,51 @@ exports.exportarActividadesSociedades = async (req, res, next) => {
 
     // Anchos aproximados
     worksheet.columns.forEach((col) => {
       col.width = Math.min(Math.max(15, (col.header || '').length + 5), 40);
     });
 
     const buffer = await workbook.xlsx.writeBuffer();
     res.setHeader(
       'Content-Type',
       'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
     );
     res.setHeader(
       'Content-Disposition',
       `attachment; filename="${fileBaseName}.xlsx"`,
     );
     res.send(Buffer.from(buffer));
   } catch (err) {
     next(err);
   }
 };
 
 /**
  * Exporta el progreso detallado de usuarios (CSV o XLSX).
  * GET /informes/progreso-usuarios?formato=csv|xlsx
  */
-exports.exportarProgresoUsuarios = async (req, res, next) => {
+const exportarProgresoUsuarios = async (req, res, next) => {
   try {
     const formato = (req.query.formato || 'xlsx').toLowerCase();
     const progresos = await ProgresoResidente.find()
       .populate('residente fase')
       .lean();
 
     const rows = [];
     (progresos || []).forEach((prog) => {
       const usuario = prog.residente || {};
       const fase = prog.fase || {};
       (prog.actividades || []).forEach((act) => {
         rows.push({
           usuarioId: usuario._id ? String(usuario._id) : '',
           nombre: usuario.nombre || '',
           apellidos: usuario.apellidos || '',
           faseNumero: fase.numero || '',
           faseNombre: fase.nombre || '',
           actividadNombre: act.nombre || '',
           actividadTipo: act.tipo || '',
           estado: act.estado || '',
           comentariosTutor: act.comentariosTutor || '',
           comentariosResidente: act.comentariosResidente || '',
           cirugia: act.cirugia || act.otraCirugia || '',
           nombreCirujano: act.nombreCirujano || '',
           porcentajeParticipacion: act.porcentajeParticipacion ?? '',
