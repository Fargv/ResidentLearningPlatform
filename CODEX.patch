diff --git a/client/src/pages/dashboard/AdminUsuarios.tsx b/client/src/pages/dashboard/AdminUsuarios.tsx
index a88a67ab3ef7a0c8e337235f2715237556fa9b0a..f2082e5e82e0a5e9cb85a46c627948ae2cb1d045 100644
--- a/client/src/pages/dashboard/AdminUsuarios.tsx
+++ b/client/src/pages/dashboard/AdminUsuarios.tsx
@@ -11,50 +11,51 @@ import {
   DialogContent,
   DialogContentText,
   DialogActions,
   Table,
   TableBody,
   TableCell,
   TableContainer,
   TableHead,
   TableRow,
   Chip,
   LinearProgress,
   Alert,
   Snackbar,
   Autocomplete,
   IconButton,
   Tooltip,
   CircularProgress,
   Backdrop,
   Menu,
   MenuItem,
 } from "@mui/material";
 import {
   Add as AddIcon,
   Edit as EditIcon,
   Download as DownloadIcon,
+  Assessment as AssessmentIcon,
 
    //Person as PersonIcon,
   //Email as EmailIcon
 } from "@mui/icons-material";
 import { useAuth } from "../../context/AuthContext";
 import { useNavigate } from "react-router-dom";
 import api, { createUser, updateUserPassword, getTutors } from "../../api";
 import InviteUsersMail from "../../components/InviteUsersMail";
 import BackButton from "../../components/BackButton";
 import { useTranslation, Trans } from "react-i18next";
 import { getRoleChipSx } from "../../utils/roleChipColors";
 import { FaseCirugia } from "../../types/FaseCirugia";
 
 const AdminUsuarios: React.FC = () => {
   const { user } = useAuth();
   const { t } = useTranslation();
   const navigate = useNavigate();
   const typeKey = (tipo?: string) =>
     tipo === "Programa Sociedades"
       ? "programaSociedades"
       : tipo === "Programa Residentes"
       ? "programaResidentes"
       : "";
   const rolesResidentes = [
     "residente",
diff --git a/client/src/pages/dashboard/AdminUsuarios.tsx b/client/src/pages/dashboard/AdminUsuarios.tsx
index a88a67ab3ef7a0c8e337235f2715237556fa9b0a..f2082e5e82e0a5e9cb85a46c627948ae2cb1d045 100644
--- a/client/src/pages/dashboard/AdminUsuarios.tsx
+++ b/client/src/pages/dashboard/AdminUsuarios.tsx
@@ -814,133 +815,136 @@ const AdminUsuarios: React.FC = () => {
                   <TableCell>
                     {usuario.tipo
                       ? t(`types.${typeKey(usuario.tipo)}`)
                       : "-"}
                   </TableCell>
                   <TableCell>{usuario.sociedad?.titulo || "-"}</TableCell>
                   <TableCell>
                     <Chip
                       label={t(`roles.${usuario.rol}`)}
                       size="small"
                       sx={getRoleChipSx(usuario.rol)}
                     />
                   </TableCell>
                   <TableCell>{usuario.hospital?.nombre || "-"}</TableCell>
                   <TableCell>{usuario.especialidad || "-"}</TableCell>
                   <TableCell>
                     {usuario.rol === "residente"
                       ? usuario.tutor && typeof usuario.tutor === "object"
                         ? `${usuario.tutor.nombre} ${usuario.tutor.apellidos}${usuario.tutor.especialidad ? ` (${usuario.tutor.especialidad})` : ""}`
                         : <Chip color="warning" label={t("adminUsers.noTutor")} />
                       : "-"}
                   </TableCell>
                   <TableCell>{usuario.zona || "-"}</TableCell>
                   <TableCell>{usuario.faseActual || "-"}</TableCell>
                   <TableCell align="right">
-                    {usuario.fasesCirugia && usuario.fasesCirugia.length > 0 && (
-                      <>
-                        <Tooltip
-                          title={t('adminUsers.actions.downloadSurgeryReport', {
-                            phase: t('adminPhases.phase').toLowerCase(),
-                          })}
-                        >
-                          <IconButton
-                            onClick={(e) => handleOpenInformeMenu(e, usuario)}
-                            size="small"
-                            sx={{ mr: 1 }}
+                    <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
+                      {usuario.fasesCirugia && usuario.fasesCirugia.length > 0 && (
+                        <>
+                          <Tooltip
+                            title={t('adminUsers.actions.downloadSurgeryReport', {
+                              phase: t('adminPhases.phase').toLowerCase(),
+                            })}
                           >
-                            <DownloadIcon />
-                          </IconButton>
-                        </Tooltip>
-                        <Menu
-                          anchorEl={anchorElInforme}
-                          open={
-                            Boolean(anchorElInforme) &&
-                            menuUsuario?._id === usuario._id
-                          }
-                          onClose={handleCloseInformeMenu}
-                        >
-                          {menuUsuario?.fasesCirugia?.map((fase: FaseCirugia) => (
-                            <MenuItem
-                              key={fase.id}
-                              onClick={() => {
-                                handleDownloadInforme(
-                                  fase.id,
-                                  fase.fase,
-                                  `${menuUsuario.nombre} ${menuUsuario.apellidos}`,
-                                );
-                                handleCloseInformeMenu();
-                              }}
+                            <IconButton
+                              onClick={(e) => handleOpenInformeMenu(e, usuario)}
+                              size="small"
                             >
-                              {t('adminUsers.actions.downloadSurgeryReport', {
-                                phase: fase.fase,
-                              })}
-                            </MenuItem>
-                          ))}
-                        </Menu>
-                      </>
-                    )}
-                    <Button
-                      variant="outlined"
-                      color="primary"
-                      onClick={() => handleOpenEditarDialog(usuario)}
-                      size="small"
-                      startIcon={<EditIcon />}
-                      sx={{ mr: 1, minWidth: 150 }}
-                    >
-                      {t("adminUsers.actions.edit")}
-                    </Button>
-                    {['residente', 'participante'].includes(usuario.rol) &&
-                      user?.rol === "administrador" &&
-                      usuario.tieneProgreso && (
-                        <Button
-                          variant="outlined"
-                          size="small"
-                          onClick={() =>
-                            navigate(
-                              `/dashboard/progreso-usuario/${usuario._id}`,
-                            )
-                          }
-                          sx={{ mr: 1, minWidth: 150 }}
-                        >
-                          {t('adminUserProgress.viewProgress')}
-                        </Button>
-                      )}
-                    {['residente', 'participante'].includes(usuario.rol) &&
-                      !usuario.tieneProgreso && (
-                        <Button
-                          variant="outlined"
-                          onClick={() => handleCrearProgreso(usuario._id)}
-                          size="small"
-                          sx={{ mr: 1, minWidth: 150 }}
-                        >
-                          {t("adminUsers.actions.createProgress")}
-                        </Button>
+                              <DownloadIcon />
+                            </IconButton>
+                          </Tooltip>
+                          <Menu
+                            anchorEl={anchorElInforme}
+                            open={
+                              Boolean(anchorElInforme) &&
+                              menuUsuario?._id === usuario._id
+                            }
+                            onClose={handleCloseInformeMenu}
+                          >
+                            {menuUsuario?.fasesCirugia?.map((fase: FaseCirugia) => (
+                              <MenuItem
+                                key={fase.id}
+                                onClick={() => {
+                                  handleDownloadInforme(
+                                    fase.id,
+                                    fase.fase,
+                                    `${menuUsuario.nombre} ${menuUsuario.apellidos}`,
+                                  );
+                                  handleCloseInformeMenu();
+                                }}
+                              >
+                                {t('adminUsers.actions.downloadSurgeryReport', {
+                                  phase: fase.fase,
+                                })}
+                              </MenuItem>
+                            ))}
+                          </Menu>
+                        </>
                       )}
-                  </TableCell>
-                </TableRow>
-              ))}
+                      <Button
+                        variant="outlined"
+                        color="primary"
+                        onClick={() => handleOpenEditarDialog(usuario)}
+                        size="small"
+                        startIcon={<EditIcon />}
+                        sx={{ minWidth: 150 }}
+                      >
+                        {t("adminUsers.actions.edit")}
+                      </Button>
+                      {['residente', 'participante'].includes(usuario.rol) &&
+                        user?.rol === "administrador" &&
+                        usuario.tieneProgreso && (
+                          <Button
+                            variant="outlined"
+                            size="small"
+                            color="secondary"
+                            startIcon={<AssessmentIcon />}
+                            onClick={() =>
+                              navigate(
+                                `/dashboard/progreso-usuario/${usuario._id}`,
+                              )
+                            }
+                            sx={{ minWidth: 150 }}
+                          >
+                            {t('adminUserProgress.viewProgress')}
+                          </Button>
+                        )}
+                      {['residente', 'participante'].includes(usuario.rol) &&
+                        !usuario.tieneProgreso && (
+                          <Button
+                            variant="outlined"
+                            onClick={() => handleCrearProgreso(usuario._id)}
+                            size="small"
+                            sx={{ minWidth: 150 }}
+                          >
+                            {t("adminUsers.actions.createProgress")}
+                          </Button>
+                        )}
+                      </Box>
+                    </TableCell>
+                  </TableRow>
+                ))}
             </TableBody>
           </Table>
         </TableContainer>
       </Paper>
 
 
       {/* Diálogo para invitar usuario */}
       <InviteUsersMail
         open={openInvitarDialog}
         onClose={handleCloseInvitarDialog}
       />
 
       {/* Diálogo para actualizar contraseña */}
       <Dialog open={openPasswordDialog} onClose={handleClosePasswordDialog}>
         <DialogTitle>{t("adminUsers.password.title")}</DialogTitle>
         <DialogContent>
           <TextField
             autoFocus
             margin="dense"
             id="password-update"
             label={t("adminUsers.password.label")}
             type="password"
             fullWidth
             variant="outlined"
             value={passwordValue}
