diff --git a/tests/notificaciones.test.js b/tests/notificaciones.test.js
index 76d35027f0a5938a4e1c92c740567bea0d6b4ade..d209af5a64ab5fcabf301f16b31a056e1ac4de4c 100644
--- a/tests/notificaciones.test.js
+++ b/tests/notificaciones.test.js
@@ -1,29 +1,30 @@
 const {
   getNotificacionesUsuario,
   marcarComoLeida,
-  eliminarNotificacion
+  eliminarNotificacion,
+  crearNotificacion
 } = require('../src/controllers/notificacionController');
 const Notificacion = require('../src/models/Notificacion');
 
 describe('notificacionController', () => {
   afterEach(() => {
     jest.restoreAllMocks();
   });
 
   test('getNotificacionesUsuario obtiene notificaciones del usuario', async () => {
     const list = [{ _id: 'n1' }, { _id: 'n2' }];
     const sort = jest.fn().mockResolvedValue(list);
     jest.spyOn(Notificacion, 'find').mockReturnValue({ sort });
 
     const req = { user: { id: 'u1' } };
     const res = { status: jest.fn().mockReturnThis(), json: jest.fn() };
 
     await getNotificacionesUsuario(req, res, jest.fn());
 
     expect(Notificacion.find).toHaveBeenCalledWith({ usuario: 'u1' });
     expect(sort).toHaveBeenCalledWith('-fechaCreacion');
     expect(res.status).toHaveBeenCalledWith(200);
     expect(res.json).toHaveBeenCalledWith({ success: true, count: 2, data: list });
   });
 
   test('marcarComoLeida marca la notificacion y la devuelve', async () => {
diff --git a/tests/notificaciones.test.js b/tests/notificaciones.test.js
index 76d35027f0a5938a4e1c92c740567bea0d6b4ade..d209af5a64ab5fcabf301f16b31a056e1ac4de4c 100644
--- a/tests/notificaciones.test.js
+++ b/tests/notificaciones.test.js
@@ -38,26 +39,36 @@ describe('notificacionController', () => {
     const req = { params: { id: 'n1' }, user: { id: 'u1' } };
     const res = { status: jest.fn().mockReturnThis(), json: jest.fn() };
 
     await marcarComoLeida(req, res, jest.fn());
 
     expect(findSpy).toHaveBeenCalledWith('n1');
     expect(notif.marcarComoLeida).toHaveBeenCalled();
     expect(res.status).toHaveBeenCalledWith(200);
     expect(res.json).toHaveBeenCalledWith({ success: true, data: updated });
   });
 
   test('eliminarNotificacion borra la notificacion del usuario', async () => {
     const notif = { usuario: 'u1', remove: jest.fn().mockResolvedValue() };
     jest.spyOn(Notificacion, 'findById').mockResolvedValue(notif);
 
     const req = { params: { id: 'n1' }, user: { id: 'u1' } };
     const res = { status: jest.fn().mockReturnThis(), json: jest.fn() };
 
     await eliminarNotificacion(req, res, jest.fn());
 
     expect(Notificacion.findById).toHaveBeenCalledWith('n1');
     expect(notif.remove).toHaveBeenCalled();
     expect(res.status).toHaveBeenCalledWith(200);
     expect(res.json).toHaveBeenCalledWith({ success: true, data: {} });
   });
+
+  test('crearNotificacion acepta tipo passwordReset', async () => {
+    const datos = { usuario: 'u1', tipo: 'passwordReset', mensaje: 'Reset' };
+    jest.spyOn(Notificacion, 'create').mockResolvedValue(datos);
+
+    const res = await crearNotificacion(datos);
+
+    expect(Notificacion.create).toHaveBeenCalledWith(datos);
+    expect(res).toEqual(datos);
+  });
 });
