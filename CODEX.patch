diff --git a/src/controllers/authController.js b/src/controllers/authController.js
index 70c80fe799ae61c622ca99758189888dc5b24bfb..fd23bbc24db131153d093c0ee0eb8c41c1d72dfc 100644
--- a/src/controllers/authController.js
+++ b/src/controllers/authController.js
@@ -294,52 +294,52 @@ const requestPasswordReset = async (req, res, next) => {
       const hospital = user.hospital.zona ? user.hospital : await Hospital.findById(user.hospital);
       zona = hospital?.zona;
     }
 
     if (zona) {
       const csms = await User.find({ rol: Role.CSM, zona }).select('_id');
       csms.forEach((u) => destinatarios.add(u._id.toString()));
     }
 
     const admins = await User.find({ rol: Role.ADMINISTRADOR }).select('_id');
     admins.forEach((u) => destinatarios.add(u._id.toString()));
 
     if (user.hospital) {
       const tutoresAll = await User.find({
         rol: { $in: [Role.TUTOR, Role.PROFESOR] },
         hospital: user.hospital._id || user.hospital,
         especialidad: 'ALL'
       }).select('_id');
       tutoresAll.forEach((u) => destinatarios.add(u._id.toString()));
     }
 
     const notificaciones = Array.from(destinatarios).map((id) => ({
       usuario: id,
       tipo: 'passwordReset',
       mensaje: `El usuario ${user.email} ha solicitado un reseteo de contraseña.`,
-      entidadRelacionada: { tipo: 'user', id: user._id }
-    }));
+      entidadRelacionada: { tipo: 'usuario', id: user._id }
+    }));
 
     await Notificacion.insertMany(notificaciones);
 
     res.status(200).json({ success: true });
   } catch (err) {
     next(err);
   }
 };
 
 const forgotPassword = async (req, res, next) => {
   try {
     const { email } = req.body;
     const user = await User.findOne({ email });
     if (!user) {
       return next(new ErrorResponse('No existe un usuario con ese email', 404));
     }
 
     // Generar token y establecer expiración (por ejemplo, 1 día)
     const resetToken = user.getResetPasswordToken(24 * 60 * 60 * 1000);
 
     await user.save({ validateBeforeSave: false });
 
     res.status(200).json({ success: true, resetToken });
   } catch (err) {
     next(err);
