diff --git a/client/src/pages/dashboard/AdminUsuarios.tsx b/client/src/pages/dashboard/AdminUsuarios.tsx
index 9eae2abf8200ed7330399a6e665dc9db197bc676..1e940b5d66de1f398dd70c68bd59ae4fb7f96541 100644
--- a/client/src/pages/dashboard/AdminUsuarios.tsx
+++ b/client/src/pages/dashboard/AdminUsuarios.tsx
@@ -21,50 +21,51 @@ import {
   LinearProgress,
   Alert,
   Snackbar,
   Autocomplete,
   IconButton,
   Tooltip,
   CircularProgress,
   Backdrop,
 } from "@mui/material";
 import {
   Add as AddIcon,
   Edit as EditIcon,
   Delete as DeleteIcon,
   VpnKey as VpnKeyIcon,
   Download as DownloadIcon,
 
    //Person as PersonIcon,
   //Email as EmailIcon
 } from "@mui/icons-material";
 import { useAuth } from "../../context/AuthContext";
 import api, { createUser, updateUserPassword, getTutors } from "../../api";
 import InviteUsersMail from "../../components/InviteUsersMail";
 import BackButton from "../../components/BackButton";
 import { useTranslation, Trans } from "react-i18next";
 import { getRoleChipSx } from "../../utils/roleChipColors";
+import { FaseCirugia } from "../../types/FaseCirugia";
 
 const AdminUsuarios: React.FC = () => {
   const { user } = useAuth();
   const { t } = useTranslation();
   const typeKey = (tipo?: string) =>
     tipo === "Programa Sociedades"
       ? "programaSociedades"
       : tipo === "Programa Residentes"
       ? "programaResidentes"
       : "";
   const rolesResidentes = [
     "residente",
     "tutor",
     "csm",
     "administrador",
   ];
   const rolesSociedades = [
     "participante",
     "profesor",
     "csm",
     "administrador",
   ];
   const zonaOptions = [
     "NORDESTE",
     "NORTE",
diff --git a/client/src/pages/dashboard/AdminUsuarios.tsx b/client/src/pages/dashboard/AdminUsuarios.tsx
index 9eae2abf8200ed7330399a6e665dc9db197bc676..1e940b5d66de1f398dd70c68bd59ae4fb7f96541 100644
--- a/client/src/pages/dashboard/AdminUsuarios.tsx
+++ b/client/src/pages/dashboard/AdminUsuarios.tsx
@@ -111,51 +112,51 @@ const AdminUsuarios: React.FC = () => {
   >("nombre");
   const [sortOrder, setSortOrder] = useState<"asc" | "desc">("asc");
 
   const allRoles = Array.from(
     new Set([...rolesResidentes, ...rolesSociedades]),
   );
   const [selectedRoles, setSelectedRoles] = useState<string[]>([]);
   const [selectedHospitals, setSelectedHospitals] = useState<string[]>([]);
   const [selectedZonas, setSelectedZonas] = useState<string[]>([]);
   const [selectedEspecialidades, setSelectedEspecialidades] = useState<string[]>([]);
   const [selectedTipos, setSelectedTipos] = useState<string[]>([]);
   const [tutores, setTutores] = useState<any[]>([]);
 
   const roleOptions =
     formData.tipo === "Programa Sociedades" ? rolesSociedades : rolesResidentes;
 
   useEffect(() => {
     const fetchData = async () => {
       try {
         setLoading(true);
 
         const usuariosRes = await api.get("/users");
 
         const usuariosConProgreso = await Promise.all(
           usuariosRes.data.data.map(async (u: any) => {
-            let fasesCirugia: { id: string; fase: string }[] = [];
+            let fasesCirugia: FaseCirugia[] = [];
             if (["residente", "participante"].includes(u.rol)) {
               try {
                 const progRes = await api.get(`/progreso/residente/${u._id}`);
                 fasesCirugia = progRes.data.data
                   .filter(
                     (p: any) =>
                       p.estadoGeneral === "validado" &&
                       p.actividades.some(
                         (a: any) => a.cirugia && a.estado === "validado",
                       ),
                   )
                   .map((p: any) => ({ id: p._id, fase: p.fase.nombre }));
               } catch {
                 fasesCirugia = [];
               }
             }
             return { ...u, fasesCirugia };
           }),
         );
 
         setUsuariosLista(usuariosConProgreso);
 
         const hospitalesRes = await api.get("/hospitals");
 
         setHospitales(hospitalesRes.data.data);
diff --git a/client/src/pages/dashboard/AdminUsuarios.tsx b/client/src/pages/dashboard/AdminUsuarios.tsx
index 9eae2abf8200ed7330399a6e665dc9db197bc676..1e940b5d66de1f398dd70c68bd59ae4fb7f96541 100644
--- a/client/src/pages/dashboard/AdminUsuarios.tsx
+++ b/client/src/pages/dashboard/AdminUsuarios.tsx
@@ -749,51 +750,51 @@ const AdminUsuarios: React.FC = () => {
                   <TableCell>{usuario.email}</TableCell>
                   <TableCell>
                     {usuario.tipo
                       ? t(`types.${typeKey(usuario.tipo)}`)
                       : "-"}
                   </TableCell>
                   <TableCell>{usuario.sociedad?.titulo || "-"}</TableCell>
                   <TableCell>
                     <Chip
                       label={t(`roles.${usuario.rol}`)}
                       size="small"
                       sx={getRoleChipSx(usuario.rol)}
                     />
                   </TableCell>
                   <TableCell>{usuario.hospital?.nombre || "-"}</TableCell>
                   <TableCell>{usuario.especialidad || "-"}</TableCell>
                   <TableCell>
                     {usuario.rol === "residente"
                       ? usuario.tutor && typeof usuario.tutor === "object"
                         ? `${usuario.tutor.nombre} ${usuario.tutor.apellidos}${usuario.tutor.especialidad ? ` (${usuario.tutor.especialidad})` : ""}`
                         : <Chip color="warning" label={t("adminUsers.noTutor")} />
                       : "-"}
                   </TableCell>
                   <TableCell>{usuario.zona || "-"}</TableCell>
                   <TableCell align="right">
-                    {usuario.fasesCirugia?.map((fase) => (
+                    {usuario.fasesCirugia?.map((fase: FaseCirugia) => (
                       <Tooltip
                         key={fase.id}
                         title={t(
                           "adminUsers.actions.downloadSurgeryReport",
                           { phase: fase.fase },
                         )}
                       >
                         <IconButton
                           onClick={() =>
                             handleDownloadInforme(fase.id, fase.fase)
                           }
                           size="small"
                           sx={{ mr: 1 }}
                         >
                           <DownloadIcon />
                         </IconButton>
                       </Tooltip>
                     ))}
                     <Button
                       variant="outlined"
                       color="primary"
                       onClick={() => handleOpenEditarDialog(usuario)}
                       size="small"
                       startIcon={<EditIcon />}
                       sx={{ mr: 1, minWidth: 150 }}

diff --git a/client/src/pages/dashboard/TutorUsuarios.tsx b/client/src/pages/dashboard/TutorUsuarios.tsx
index 040b50bb5246ec538b1635d98ff9d95015faca36..22934439876f66cf1a4ce58b4b8403f9df525f8a 100644
--- a/client/src/pages/dashboard/TutorUsuarios.tsx
+++ b/client/src/pages/dashboard/TutorUsuarios.tsx
@@ -1,39 +1,40 @@
 
 import React, { useState, useEffect, useCallback } from 'react';
 import {
   Box, Typography, Paper, Button, TextField,
   Dialog, DialogTitle, DialogContent, DialogActions,
   Table, TableBody, TableCell, TableContainer, TableHead, TableRow,
   IconButton, Chip, LinearProgress, Alert, Snackbar,
   Autocomplete, Tooltip, CircularProgress, Backdrop
 } from '@mui/material';
 import { Add as AddIcon, Edit as EditIcon, Delete as DeleteIcon, Download as DownloadIcon } from '@mui/icons-material';
 import { useAuth } from '../../context/AuthContext';
 import { useTranslation } from 'react-i18next';
 import api from '../../api';
 import { getRoleChipSx } from '../../utils/roleChipColors';
+import { FaseCirugia } from '../../types/FaseCirugia';
 
 const TutorUsuarios: React.FC = () => {
   const { user } = useAuth();
   const { t } = useTranslation();
   const typeKey = (tipo?: string) =>
     tipo === 'Programa Sociedades'
       ? 'programaSociedades'
       : tipo === 'Programa Residentes'
       ? 'programaResidentes'
       : '';
   const [usuarios, setUsuarios] = useState<any[]>([]);
   const [loading, setLoading] = useState(true);
   const [error, setError] = useState<string | null>(null);
   const [procesando, setProcesando] = useState(false);
 
   const [openDialog, setOpenDialog] = useState(false);
   const [editar, setEditar] = useState(false);
   const [selected, setSelected] = useState<any>(null);
 
   const [formData, setFormData] = useState({
     email: '',
     nombre: '',
     apellidos: '',
     rol: user?.rol === 'profesor' ? 'participante' : 'residente',
     hospital: user?.hospital?._id || ''
diff --git a/client/src/pages/dashboard/TutorUsuarios.tsx b/client/src/pages/dashboard/TutorUsuarios.tsx
index 040b50bb5246ec538b1635d98ff9d95015faca36..22934439876f66cf1a4ce58b4b8403f9df525f8a 100644
--- a/client/src/pages/dashboard/TutorUsuarios.tsx
+++ b/client/src/pages/dashboard/TutorUsuarios.tsx
@@ -46,51 +47,51 @@ const TutorUsuarios: React.FC = () => {
   });
   const [downloadLoading, setDownloadLoading] = useState(false);
 
   const [selectedRoles, setSelectedRoles] = useState<string[]>([]);
   const [selectedHospitals, setSelectedHospitals] = useState<string[]>([]);
   const [selectedZonas, setSelectedZonas] = useState<string[]>([]);
   const [selectedEspecialidades, setSelectedEspecialidades] = useState<string[]>([]);
   const [selectedTipos, setSelectedTipos] = useState<string[]>([]);
 
   const fetchUsuarios = useCallback(async () => {
     try {
       let res;
       if (user?.rol === 'csm') {
         res = await api.get('/users');
       } else if (user?.rol === 'profesor') {
         res = await api.get(`/users/profesor/${user._id}/participantes`);
       } else if (user?.hospital?._id) {
         res = await api.get(`/users/hospital/${user.hospital._id}`);
       }
       if (res) {
         const filtrados = res.data.data.filter(
           (u: any) => u._id !== user?._id && u.tipo === user?.tipo
         );
         const usuariosConProgreso = await Promise.all(
           filtrados.map(async (u: any) => {
-            let fasesCirugia: { id: string; fase: string }[] = [];
+            let fasesCirugia: FaseCirugia[] = [];
             if (["residente", "participante"].includes(u.rol)) {
               try {
                 const progRes = await api.get(`/progreso/residente/${u._id}`);
                 fasesCirugia = progRes.data.data
                   .filter(
                     (p: any) =>
                       p.estadoGeneral === "validado" &&
                       p.actividades.some(
                         (a: any) => a.cirugia && a.estado === "validado",
                       ),
                   )
                   .map((p: any) => ({ id: p._id, fase: p.fase.nombre }));
               } catch {
                 fasesCirugia = [];
               }
             }
             return { ...u, fasesCirugia };
           }),
         );
         setUsuarios(usuariosConProgreso);
       }
     } catch (err: any) {
       setError(err.response?.data?.error || t('tutorUsers.loadError'));
     } finally {
       setLoading(false);
diff --git a/client/src/pages/dashboard/TutorUsuarios.tsx b/client/src/pages/dashboard/TutorUsuarios.tsx
index 040b50bb5246ec538b1635d98ff9d95015faca36..22934439876f66cf1a4ce58b4b8403f9df525f8a 100644
--- a/client/src/pages/dashboard/TutorUsuarios.tsx
+++ b/client/src/pages/dashboard/TutorUsuarios.tsx
@@ -404,51 +405,51 @@ const TutorUsuarios: React.FC = () => {
                         usuario.rol === 'administrador'
                           ? 'primary'
                           : usuario.rol === 'tutor'
                           ? 'secondary'
                           : 'default'
                       }
                       size="small"
                       sx={getRoleChipSx(usuario.rol)}
                     />
                   </TableCell>
                   <TableCell>{usuario.hospital?.nombre || '-'}</TableCell>
                   <TableCell>{usuario.especialidad || '-'}</TableCell>
                   <TableCell>{usuario.zona || '-'}</TableCell>
                   <TableCell>
                     <Chip
                       label={t(
                         usuario.activo
                           ? 'tutorUsers.states.active'
                           : 'tutorUsers.states.inactive'
                       )}
                       color={usuario.activo ? 'success' : 'error'}
                       size="small"
                     />
                   </TableCell>
                   <TableCell align="right">
-                    {usuario.fasesCirugia?.map((fase) => (
+                    {usuario.fasesCirugia?.map((fase: FaseCirugia) => (
                       <Tooltip
                         key={fase.id}
                         title={t(
                           'tutorUsers.actions.downloadSurgeryReport',
                           { phase: fase.fase },
                         )}
                       >
                         <IconButton
                           onClick={() =>
                             handleDownloadInforme(fase.id, fase.fase)
                           }
                           sx={{ mr: 1 }}
                         >
                           <DownloadIcon />
                         </IconButton>
                       </Tooltip>
                     ))}
                     <IconButton
                       onClick={() => {
                         setEditar(true);
                         setSelected(usuario);
                         setFormData({
                           email: usuario.email,
                           nombre: usuario.nombre,
                           apellidos: usuario.apellidos,
