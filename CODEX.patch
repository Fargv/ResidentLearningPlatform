diff --git a/client/src/pages/Dashboard.tsx b/client/src/pages/Dashboard.tsx
index 02e935f63f2ae6c2b342c1653688ef253a0afbd0..c9ad2d9fbae2a6ec76c5ff0c508d5f9437c9130c 100644
--- a/client/src/pages/Dashboard.tsx
+++ b/client/src/pages/Dashboard.tsx
@@ -11,51 +11,52 @@ import {
   Divider,
   IconButton,
   ListItemButton,
   ListItemIcon,
   ListItemText,
   Avatar,
   Menu,
   MenuItem,
   Badge,
   useMediaQuery,
   useTheme,
   alpha
 } from '@mui/material';
 import {
   Menu as MenuIcon,
   ChevronLeft as ChevronLeftIcon,
   Dashboard as DashboardIcon,
   People as PeopleIcon,
   School as SchoolIcon,
   Assignment as AssignmentIcon,
   Notifications as NotificationsIcon,
   ExitToApp as LogoutIcon,
   Person as PersonIcon,
   Settings as SettingsIcon,
   Brightness4 as Brightness4Icon,
-  Brightness7 as Brightness7Icon
+  Brightness7 as Brightness7Icon,
+  Description as DescriptionIcon
 } from '@mui/icons-material';
 import { useAuth } from '../context/AuthContext';
 import { getNotificacionesNoLeidas } from '../api';
 import { useTranslation } from 'react-i18next';
 import { useColorMode } from '../context/ColorModeContext';
 
 // PÃ¡ginas del dashboard
 import DashboardHome from './dashboard/DashboardHome';
 import TutorValidaciones from './dashboard/TutorValidaciones';
 import Usuarios from './dashboard/Usuarios';
 import AdminHospitales from './dashboard/AdminHospitales';
 import AdminFases from './dashboard/AdminFases';
 import AdminFasesSoc from './dashboard/AdminFasesSoc';
 import AdminSociedades from './dashboard/AdminSociedades';
 import AdminProgresoDetalle from './dashboard/AdminProgresoDetalle';
 import Perfil from './dashboard/Perfil';
 import Notificaciones from './dashboard/Notificaciones';
 import DebugDashboard from './DebugDashboard';
 import ResidenteFases from './dashboard/ResidenteFases';
 import AdminAccessCodes from './dashboard/AdminAccessCodes';
 import AdminConfiguracion from './dashboard/AdminConfiguracion';
 import AdminCirugias from './dashboard/AdminCirugias';
 import LanguageSelector from '../components/LanguageSelector';
 
 const drawerWidth = 240;
diff --git a/client/src/pages/Dashboard.tsx b/client/src/pages/Dashboard.tsx
index 02e935f63f2ae6c2b342c1653688ef253a0afbd0..c9ad2d9fbae2a6ec76c5ff0c508d5f9437c9130c 100644
--- a/client/src/pages/Dashboard.tsx
+++ b/client/src/pages/Dashboard.tsx
@@ -104,50 +105,51 @@ const Dashboard: React.FC = () => {
     const items = [
       {
         text: t('actions.dashboard'),
         icon: <DashboardIcon />,
         path: '/dashboard',
         roles: ['administrador', 'tutor', 'csm', 'residente', 'participante']
       }
     ];
 
     if (user?.rol === 'residente' || user?.rol === 'participante' || user?.rol === 'profesor') {
       items.push({ text: t('actions.trainingPhases'), icon: <AssignmentIcon />, path: '/dashboard/fases', roles: ['residente', 'participante', 'profesor'] });
     }
 
 
         if (user?.rol === 'tutor' || user?.rol === 'csm' || user?.rol === 'profesor') {
       items.push({ text: t('actions.validations'), icon: <SchoolIcon />, path: '/dashboard/validaciones', roles: ['tutor', 'csm', 'profesor'] });
     }
 
     if (user?.rol === 'tutor' || user?.rol === 'csm' || user?.rol === 'profesor') {
       items.push({ text: t('actions.myUsers'), icon: <PeopleIcon />, path: '/dashboard/usuarios', roles: ['tutor', 'csm', 'profesor'] });
     }
 
     if (user?.rol === 'administrador') {
       items.push(
         { text: t('actions.users'), icon: <PeopleIcon />, path: '/dashboard/usuarios', roles: ['administrador'] },
+        { text: 'Informes', icon: <DescriptionIcon />, path: '/dashboard/informes', roles: ['administrador'] },
         { text: t('actions.settings'), icon: <SettingsIcon />, path: '/dashboard/config', roles: ['administrador'] }
       );
     }
 
     return items;
   };
   
 
   const menuItems = getMenuItems();
 
   return (
     <Box sx={{ display: 'flex' }}>
       <CssBaseline />
       <AppBar
         position="fixed"
         sx={{
           zIndex: theme.zIndex.drawer + 1,
           transition: theme.transitions.create(['width', 'margin']),
           ...(open && {
             marginLeft: drawerWidth,
             width: `calc(100% - ${drawerWidth}px)`
           })
         }}
       >
         <Toolbar>
