diff --git a/src/controllers/userController.js b/src/controllers/userController.js
index 548230352825e70a799a88736e2f8111f651f766..dc6ae9f4b32a852a9a52947cb6d60aaebb3d379b 100644
--- a/src/controllers/userController.js
+++ b/src/controllers/userController.js
@@ -12,82 +12,82 @@ const { inicializarProgresoFormativo } = require('../utils/initProgreso');
 const { Role } = require('../utils/roles');
 const { resolveTutor } = require('../utils/resolveTutor');
 
 const legacyRoles = {
   formador: Role.TUTOR,
   coordinador: Role.CSM,
   instructor: Role.PROFESOR,
   alumno: Role.PARTICIPANTE
 };
 
 
 
 
 // @desc    Obtener todos los usuarios (admin), usuarios del hospital (tutor)
 //         o participantes de la sociedad (profesor)
 // @route   GET /api/users
 // @access  Private/Admin|Tutor|CSM|Profesor
 exports.getUsers = async (req, res, next) => {
   try {
     let users;
 
     if (req.user.rol === Role.ADMINISTRADOR) {
       users = await User.find()
         .populate('hospital')
         .populate('sociedad')
-        .populate('tutor', 'nombre apellidos');
+        .populate('tutor', 'nombre apellidos especialidad');
     } else if (req.user.rol === Role.TUTOR) {
       const query = {
         hospital: req.user.hospital,
         rol: { $ne: Role.ADMINISTRADOR }
       };
       if (req.user.especialidad && req.user.especialidad !== 'ALL') {
         query.especialidad = req.user.especialidad;
       }
       users = await User.find(query)
         .populate('hospital')
         .populate('sociedad')
-        .populate('tutor', 'nombre apellidos');
+        .populate('tutor', 'nombre apellidos especialidad');
     } else if (req.user.rol === Role.CSM) {
       const hospitales = await Hospital.find({ zona: req.user.zona }).select('_id');
       const ids = hospitales.map(h => h._id);
       users = await User.find({
         hospital: { $in: ids },
         rol: { $in: [Role.RESIDENTE, Role.TUTOR] },
         tipo: 'Programa Residentes'
       })
         .populate('hospital')
         .populate('sociedad')
-        .populate('tutor', 'nombre apellidos');
+        .populate('tutor', 'nombre apellidos especialidad');
     } else if (req.user.rol === Role.PROFESOR) {
       users = await User.find({
         sociedad: req.user.sociedad,
         rol: Role.PARTICIPANTE
       })
         .populate('hospital')
         .populate('sociedad')
-        .populate('tutor', 'nombre apellidos');
+        .populate('tutor', 'nombre apellidos especialidad');
     } else {
       return next(new ErrorResponse('No autorizado para ver usuarios', 403));
     }
 
     const usersWithFlag = await Promise.all(
       users.map(async (u) => {
         const obj = u.toObject();
         if (u.rol === Role.RESIDENTE || u.rol === Role.PARTICIPANTE) {
           const existe = await ProgresoResidente.exists({ residente: u._id });
           obj.tieneProgreso = !!existe;
         }
         return obj;
       })
     );
 
     res.status(200).json({
       success: true,
       count: usersWithFlag.length,
       data: usersWithFlag
     });
   } catch (err) {
     next(err);
   }
 };
 
diff --git a/src/controllers/userController.js b/src/controllers/userController.js
index 548230352825e70a799a88736e2f8111f651f766..dc6ae9f4b32a852a9a52947cb6d60aaebb3d379b 100644
--- a/src/controllers/userController.js
+++ b/src/controllers/userController.js
@@ -207,76 +207,76 @@ exports.createUser = async (req, res, next) => {
         : null;
 
     const nuevoUsuario = await User.create({
       nombre,
       apellidos,
       email,
       password,
       rol,
       tipo: tipoVal,
       hospital: hospitalId,
       sociedad: sociedadId,
       especialidad: especialidadVal,
       tutor: tutorId,
       zona: zonaVal,
       activo: true,
       consentimientoDatos: true,
       fechaRegistro: Date.now()
     });
 
     if (rol === Role.RESIDENTE || rol === Role.PARTICIPANTE) {
       await inicializarProgresoFormativo(nuevoUsuario);
     }
 
     await nuevoUsuario.populate('hospital');
     await nuevoUsuario.populate('sociedad');
-    await nuevoUsuario.populate('tutor', 'nombre apellidos');
+    await nuevoUsuario.populate('tutor', 'nombre apellidos especialidad');
 
     await createAuditLog({
       usuario: req.user._id,
       accion: 'crear_usuario',
       descripcion: `Usuario creado: ${nuevoUsuario.email}`,
       ip: req.ip
     });
 
     res.status(201).json({ success: true, data: nuevoUsuario });
   } catch (err) {
     next(err);
   }
 };
 
 // Resto del código permanece igual...
 
 // @desc    Obtener un usuario específico
 // @route   GET /api/users/:id
 // @access  Private/Admin
 exports.getUser = async (req, res, next) => {
   try {
     const user = await User.findById(req.params.id)
       .populate('hospital')
       .populate('sociedad')
-      .populate('tutor', 'nombre apellidos');
+      .populate('tutor', 'nombre apellidos especialidad');
 
     if (!user) {
       return next(new ErrorResponse(`Usuario no encontrado con id ${req.params.id}`, 404));
     }
 
     res.status(200).json({
       success: true,
       data: user
     });
   } catch (err) {
     next(err);
   }
 };
 
 // @desc    Actualizar un usuario
 // @route   PUT /api/users/:id
 // @access  Private/Admin
 exports.updateUser = async (req, res, next) => {
   try {
     // Eliminar campos que no deben ser actualizados por esta ruta
     const { password, tutor: tutorInput, ...updateData } = req.body;
     if (updateData.rol) {
       updateData.rol = legacyRoles[updateData.rol] || updateData.rol;
       req.body.rol = updateData.rol;
     }
diff --git a/src/controllers/userController.js b/src/controllers/userController.js
index 548230352825e70a799a88736e2f8111f651f766..dc6ae9f4b32a852a9a52947cb6d60aaebb3d379b 100644
--- a/src/controllers/userController.js
+++ b/src/controllers/userController.js
@@ -390,94 +390,94 @@ exports.updateUser = async (req, res, next) => {
     updateData.especialidad = especialidadVal;
     updateData.sociedad = sociedadId;
     updateData.zona = zonaVal;
 
     if (newRol === Role.RESIDENTE) {
       let tutorVal;
       if (tutorInput === '') {
         tutorVal = null;            // desasignar explicitamente
       } else if (tutorInput === undefined) {
         const hId = hospitalId || currentUser.hospital;
         tutorVal = await resolveTutor('ALL', hId, especialidadVal);
       } else {
         tutorVal = tutorInput;
       }
       updateData.tutor = tutorVal;
     } else if (roleChanged) {
       updateData.tutor = undefined;
     }
 
     const user = await User.findByIdAndUpdate(req.params.id, updateData, {
       new: true,
       runValidators: true
     })
       .populate('hospital')
       .populate('sociedad')
-      .populate('tutor', 'nombre apellidos');
+      .populate('tutor', 'nombre apellidos especialidad');
 
     if (!user) {
       return next(new ErrorResponse(`Usuario no encontrado con id ${req.params.id}`, 404));
     }
     
     // Crear registro de auditoría
     await createAuditLog({
       usuario: req.user._id,
       accion: 'actualizar_usuario',
       descripcion: `Usuario actualizado: ${user.email}`,
       ip: req.ip
     });
 
     res.status(200).json({
       success: true,
       data: user
     });
   } catch (err) {
     next(err);
   }
 };
 
 // @desc    Activar/Desactivar un usuario
 // @route   PUT /api/users/:id/status
 // @access  Private/Admin
 exports.updateUserStatus = async (req, res, next) => {
   try {
     const { activo } = req.body;
 
     if (typeof activo !== 'boolean') {
       return next(new ErrorResponse('El estado debe ser un valor booleano', 400));
     }
 
     const user = await User.findByIdAndUpdate(
       req.params.id,
       { activo },
       {
         new: true,
         runValidators: true
       }
     )
       .populate('hospital')
-      .populate('tutor', 'nombre apellidos');
+      .populate('tutor', 'nombre apellidos especialidad');
 
     if (!user) {
       return next(new ErrorResponse(`Usuario no encontrado con id ${req.params.id}`, 404));
     }
     
     // Crear registro de auditoría
     await createAuditLog({
       usuario: req.user._id,
       accion: activo ? 'activar_usuario' : 'desactivar_usuario',
       descripcion: `Usuario ${activo ? 'activado' : 'desactivado'}: ${user.email}`,
       ip: req.ip
     });
 
     res.status(200).json({
       success: true,
       data: user
     });
   } catch (err) {
     next(err);
   }
 };
 
 // @desc    Actualizar contraseña de un usuario
 // @route   PUT /api/users/:id/password
 // @access  Private/Admin
diff --git a/src/controllers/userController.js b/src/controllers/userController.js
index 548230352825e70a799a88736e2f8111f651f766..dc6ae9f4b32a852a9a52947cb6d60aaebb3d379b 100644
--- a/src/controllers/userController.js
+++ b/src/controllers/userController.js
@@ -701,222 +701,219 @@ exports.cancelInvitation = async (req, res, next) => {
     
     // Crear registro de auditoría
     await createAuditLog({
       usuario: req.user._id,
       accion: 'cancelar_invitacion',
       descripcion: `Invitación cancelada para: ${invitation.email}`,
       ip: req.ip
     });
 
     res.status(200).json({
       success: true,
       data: {}
     });
   } catch (err) {
     next(err);
   }
 };
 
 // @desc    Obtener residentes asignados a un tutor
 // @route   GET /api/users/tutor/:id/residentes
 // @access  Private/Admin,Tutor
 exports.getTutorResidentes = async (req, res, next) => {
   try {
     const tutor = await User.findById(req.params.id)
       .populate('hospital')
-      .populate('tutor', 'nombre apellidos');
+      .populate('tutor', 'nombre apellidos especialidad');
 
     if (!tutor) {
       return next(new ErrorResponse(`Tutor no encontrado con id ${req.params.id}`, 404));
     }
 
     if (tutor.rol !== Role.TUTOR) {
       return next(new ErrorResponse(`El usuario con id ${req.params.id} no es un tutor`, 400));
     }
 
     if (req.user.rol === Role.CSM && tutor.hospital.zona !== req.user.zona) {
       return next(new ErrorResponse('No autorizado para ver residentes de otra zona', 403));
     }
 
     // Obtener residentes del mismo hospital que el tutor
     const filtrosResidentes = {
       hospital: tutor.hospital,
       rol: Role.RESIDENTE
     };
     if (tutor.especialidad && tutor.especialidad !== 'ALL') {
       filtrosResidentes.especialidad = tutor.especialidad;
     }
     const residentes = await User.find(filtrosResidentes)
       .populate('hospital')
       .populate('sociedad')
-      .populate('tutor', 'nombre apellidos');
+      .populate('tutor', 'nombre apellidos especialidad');
 
     res.status(200).json({
       success: true,
       count: residentes.length,
       data: residentes
     });
   } catch (err) {
     next(err);
   }
 };
 
 // @desc    Obtener tutores de un residente
 // @route   GET /api/users/residente/:id/tutores
 // @access  Private/Admin,Residente
 exports.getResidenteTutores = async (req, res, next) => {
   try {
     const residente = await User.findById(req.params.id)
       .populate('hospital')
-      .populate('tutor', 'nombre apellidos');
+      .populate('tutor', 'nombre apellidos especialidad');
 
     if (!residente) {
       return next(new ErrorResponse(`Residente no encontrado con id ${req.params.id}`, 404));
     }
 
     if (residente.rol !== Role.RESIDENTE) {
       return next(new ErrorResponse(`El usuario con id ${req.params.id} no es un residente`, 400));
     }
 
     if (req.user.rol === Role.CSM && residente.hospital.zona !== req.user.zona) {
       return next(new ErrorResponse('No autorizado para ver tutores de otra zona', 403));
     }
 
     // Obtener tutores del mismo hospital que el residente
     const filtrosTutores = {
       hospital: residente.hospital,
       rol: Role.TUTOR
     };
     if (req.user.rol === Role.TUTOR && req.user.especialidad && req.user.especialidad !== 'ALL') {
       filtrosTutores.especialidad = req.user.especialidad;
     }
     const tutores = await User.find(filtrosTutores)
       .populate('hospital')
       .populate('sociedad')
-      .populate('tutor', 'nombre apellidos');
+      .populate('tutor', 'nombre apellidos especialidad');
 
     res.status(200).json({
       success: true,
       count: tutores.length,
       data: tutores
     });
   } catch (err) {
     next(err);
   }
 };
 
 // @desc    Obtener tutores disponibles filtrados por hospital y especialidad
 // @route   GET /api/users/tutores
 // @access  Private/Admin|CSM|Tutor
 exports.getAvailableTutors = async (req, res, next) => {
   try {
     const { hospital, especialidad } = req.query;
     if (!hospital || !especialidad) {
       return next(new ErrorResponse('Hospital y especialidad requeridos', 400));
     }
     const query = { rol: Role.TUTOR, hospital };
     if (especialidad !== 'ALL') {
       query.$or = [{ especialidad }, { especialidad: 'ALL' }];
     }
-    const tutores = await User.find(query)
-      .populate('hospital')
-      .populate('sociedad')
-      .populate('tutor', 'nombre apellidos');
+    const tutores = await User.find(query).select('nombre apellidos especialidad');
     res.status(200).json({
       success: true,
       count: tutores.length,
       data: tutores,
     });
   } catch (err) {
     next(err);
   }
 };
 
 // @desc    Obtener participantes de un profesor
 // @route   GET /api/users/profesor/:id/participantes
 // @access  Private/Admin,Profesor
 exports.getProfesorParticipantes = async (req, res, next) => {
   try {
     const profesor = await User.findById(req.params.id)
       .populate('sociedad')
-      .populate('tutor', 'nombre apellidos');
+      .populate('tutor', 'nombre apellidos especialidad');
 
     if (!profesor) {
       return next(
         new ErrorResponse(`Profesor no encontrado con id ${req.params.id}`, 404)
       );
     }
 
     if (profesor.rol !== Role.PROFESOR) {
       return next(
         new ErrorResponse(`El usuario con id ${req.params.id} no es un profesor`, 400)
       );
     }
 
     if (
       req.user.rol === Role.PROFESOR &&
       req.user._id.toString() !== profesor._id.toString()
     ) {
       return next(
         new ErrorResponse('No autorizado para ver participantes de otro profesor', 403)
       );
     }
 
     const participantes = await User.find({
       sociedad: profesor.sociedad,
       rol: Role.PARTICIPANTE,
       tipo: profesor.tipo,
     })
       .populate('sociedad')
-      .populate('tutor', 'nombre apellidos');
+      .populate('tutor', 'nombre apellidos especialidad');
 
     res.status(200).json({
       success: true,
       count: participantes.length,
       data: participantes,
     });
   } catch (err) {
     next(err);
   }
 };
 
 exports.getUsersByHospital = async (req, res) => {
   try {
     const { hospitalId } = req.params;
 
     if (req.user.rol === Role.CSM) {
       const hosp = await Hospital.findById(hospitalId);
       if (!hosp || hosp.zona !== req.user.zona) {
         return res.status(403).json({ success: false, error: 'No autorizado' });
       }
     }
 
     let query = {
       hospital: hospitalId,
       tipo: req.user.tipo,
       _id: { $ne: req.user._id }
     };
     if (req.user.rol === Role.TUTOR) {
       query.rol = Role.RESIDENTE;
       if (req.user.especialidad && req.user.especialidad !== 'ALL') {
         query.especialidad = req.user.especialidad;
       }
     } else if (req.user.rol === Role.CSM) {
       query.rol = { $in: [Role.RESIDENTE, Role.TUTOR] };
     }
 
     const users = await User.find(query)
       .populate('hospital')
       .populate('sociedad')
-      .populate('tutor', 'nombre apellidos');
+      .populate('tutor', 'nombre apellidos especialidad');
 
     res.status(200).json({
       success: true,
       data: users,
     });
   } catch (error) {
     res.status(500).json({
       success: false,
       error: 'Error al obtener usuarios del hospital',
     });
   }
 };
