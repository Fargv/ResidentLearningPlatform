diff --git a/AGENTS.md b/AGENTS.md
index c6e13c129d8c60230bc546522e7663aa22e67267..9e093d5e12b92ce3e96f352be27ace550b1c9116 100644
--- a/AGENTS.md
+++ b/AGENTS.md
@@ -27,28 +27,29 @@ Este archivo registra tareas realizadas o propuestas por agentes automáticos (c
   actualizar usuarios.
 - 2025-07-17: Fechas de sociedades en `ResidenteFases` con formato "julio 2025"
   y color según estado y fecha.
 - 2025-07-17: Nuevo formateador `formatDayMonthYear` y fecha corta en `ResidenteFases`.
 - 2025-07-17: Milestones del Dashboard con diálogo y test de apertura al hacer clic.
 - 2025-07-22: npm test ahora ejecuta pruebas del cliente con react-scripts antes de las pruebas de backend.
 - 2025-07-18: Validación de tamaño de archivo en `ResidenteFases` y mensaje de error.
 - 2025-07-21: Banner de desarrollo y fondo rojo claro en `App.tsx` cuando
   `REACT_APP_ENV` es `dev`.
 - 2025-07-22: userController copia `zona` del hospital y valida rol `coordinador`.
 - 2025-07-22: formData.tipo predeterminado 'Programa Residentes' y ajustes en handleChange
 - 2025-07-30: Eliminada la vista `AdminValidaciones` y ruta `/dashboard/validaciones-admin`; se reemplaza por `informes`.
 - 2025-07-31: Añadidas dependencias `ajv` y `ajv-keywords` al cliente e intento de regenerar el lockfile.
 - 2025-08-01: Localización de AdminConfiguracion y claves `adminConfig` en los archivos de idioma.
 - 2025-08-01: Internacionalización de la página de perfil con nuevas traducciones `profile`.
 - 2025-08-04: Internacionalización de `AdminFases` con claves `adminPhases` y reutilización de textos comunes.
 - 2025-08-30: Creación de la página `PrivacyPolicy` con internacionalización y metadatos de actualización.
 - 2025-08-11: Actualización de roles `'formador'`, `'coordinador'`, `'instructor'` y `'alumno'` a `'tutor'`, `'csm'`, `'profesor'` y `'participante'` en modelos y pruebas.
 - 2025-08-12: Cambio de ruta a `/tutor/validaciones/pendientes` en `progresoRoutes.js`.
 - 2025-08-12: Reemplazo de `comentariosFormador` por `comentariosTutor` en `ResidenteFases` y verificación en `ProgresoResidente`.
 - 2025-08-12: Actualizada la versión de Node a 20 LTS en `.nvmrc`, `package.json` y `netlify.toml` para unificar el entorno.
 - 2025-08-14: Detalle de cirugías en `ResidenteFases` muestra nombre, cirujano y porcentaje de participación.
 
 - 2025-08-14: Añadida entrada "activityType" en "residentPhases" de los archivos de idioma.
 - 2025-08-15: Botón para alternar modo claro/oscuro en AppBar del Dashboard.
-- 2025-09-01: Botón "Crear fase" ahora usa `variant="contained"` y `color="primary"` en `AdminFases` y `AdminFasesSoc`.
-- 2025-09-01: Índices compuestos en `User` y validación de `tutor` solo para residentes.
+- 2025-09-01: Botón "Crear fase" ahora usa `variant="contained"` y `color="primary"` en `AdminFases` y `AdminFasesSoc`.
+- 2025-09-01: Índices compuestos en `User` y validación de `tutor` solo para residentes.
+- 2025-09-03: Certificados usan `FRONTEND_URL` y footer con enlace dinámico.
 ⚠️ Este archivo no interfiere con el código ni el despliegue.
diff --git a/src/controllers/certificadoController.js b/src/controllers/certificadoController.js
index 41c9278e1670b10e5b3a31fb3f12934d0f90f264..ba4b4711ceb52a2534e07aa60b6558b589f5c97e 100644
--- a/src/controllers/certificadoController.js
+++ b/src/controllers/certificadoController.js
@@ -1,31 +1,35 @@
 const pdf = require("html-pdf-node");
 const path = require("path");
 const fs = require("fs");
 const User = require("../models/User");
 const ProgresoResidente = require("../models/ProgresoResidente");
 
+const frontendUrl =
+  process.env.FRONTEND_URL ||
+  "https://residentlearningplatform.netlify.app";
+
 exports.descargarCertificado = async (req, res, next) => {
   try {
     const usuario = await User.findById(req.params.id)
       .populate("hospital")
       .populate("tutor", "nombre apellidos");
     if (!usuario) {
       return res
         .status(404)
         .json({ success: false, error: "Usuario no encontrado" });    }
 
     if (
       (req.user.rol === "residente" || req.user.rol === "participante") &&
       req.user.id !== req.params.id
     ) {
       return res.status(403).json({ success: false, error: "No autorizado" });
     }
 
     const progresos = await ProgresoResidente.find({
       residente: req.params.id,
     }).sort({ createdAt: 1 });
     if (!progresos.every((p) => p.estadoGeneral === "validado")) {
       return res
         .status(400)
         .json({ success: false, error: "Existen fases sin validar" });
     }
diff --git a/src/controllers/certificadoController.js b/src/controllers/certificadoController.js
index 41c9278e1670b10e5b3a31fb3f12934d0f90f264..ba4b4711ceb52a2534e07aa60b6558b589f5c97e 100644
--- a/src/controllers/certificadoController.js
+++ b/src/controllers/certificadoController.js
@@ -123,51 +127,54 @@ exports.descargarCertificado = async (req, res, next) => {
         ? `Tutor del programa de residentes del ${usuario.hospital.nombre}`
         : "";
       html = html
         .replace(
           "{{HOSPITAL_LOGO}}",
           `<img src="${usuario.hospital.urlHospiLogo}" alt="Logo Hospital" />`,
         )
         .replace("{{TUTOR_NAME}}", tutorName)
         .replace("{{TUTOR_ROLE_LINE}}", tutorRoleLine);
     } else if (programa === "Programa Sociedades") {
       html = html
         .replace("{{LOGOS}}", logosHtml)
         .replace(
           "{{HOSPITAL_NOMBRE}}",
           usuario.hospital ? usuario.hospital.nombre : "",
         );
     } else {
       html = html.replace("{{LOGOS}}", logosHtml);
     }
 
     html = html
       .replace("{{CERT_TITLE}}", certificateStrings.title)
       .replace("{{PROGRAMA}}", programa)
       .replace("{{CERT_BODY}}", formattedBody)
       .replace("{{CERT_DATE}}", dateLine)
-      .replace("{{CERT_FOOTER}}", certificateStrings.footer)
+      .replace(
+        "{{CERT_FOOTER}}",
+        certificateStrings.footer.replace("{{url}}", frontendUrl),
+      )
       .replace("{{LOGO_TOP}}", "https://www.abexsl.es/images/logo.png")
       .replace("{{SIGNATURE_LOGO}}", signatureBase64)
       .replace("{{LANG}}", lang);
 
     if (programa === "Programa Residentes" && html.includes("{{")) {
       return res.status(500).json({
         success: false,
         error: "Marcadores sin reemplazar en la plantilla",
       });
     }
     const pdfBuffer = await pdf.generatePdf(
       { content: html },
       { format: "A4" },
     );
     fs.writeFileSync(filePath, pdfBuffer);
 
     res.set("Content-Type", "application/pdf");
     res.download(filePath, "certificado.pdf", (err) => {
       fs.unlink(filePath, (unlinkErr) => {
         if (unlinkErr)
           console.error("Error eliminando certificado temporal", unlinkErr);
       });
       if (err) next(err);
     });
   } catch (err) {
