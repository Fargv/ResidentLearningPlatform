diff --git a/src/controllers/informeCirugiasController.js b/src/controllers/informeCirugiasController.js
index 7643e4510d2230a30f31dee760f255347d377783..4afd45602862563fd1a0a773db6586b20651da70 100644
--- a/src/controllers/informeCirugiasController.js
+++ b/src/controllers/informeCirugiasController.js
@@ -1,52 +1,52 @@
 const path = require('path');
 const fs = require('fs');
 const ExcelJS = require('exceljs');
 const ProgresoResidente = require('../models/ProgresoResidente');
 
 exports.descargarInformeCirugias = async (req, res, next) => {
   try {
     const progreso = await ProgresoResidente.findById(req.params.id)
       .populate({
         path: 'residente',
         select: 'nombre apellidos tipo hospital sociedad especialidad',
         populate: { path: 'hospital', select: 'zona' },
       })
       .populate('fase')
       .populate('actividades.cirugia');
 
     if (!progreso) {
       return res
         .status(404)
         .json({ success: false, error: 'Progreso no encontrado' });
     }
 
     const usuario = progreso.residente;
-    if (!usuario || usuario.tipo !== 'Programa Residentes') {
+    if (!usuario) {
       return res.status(400).json({
         success: false,
-        error: 'El usuario no pertenece al Programa Residentes',
+        error: 'Usuario no encontrado',
       });
     }
 
     if (
       req.user.rol === 'residente' &&
       req.user.id !== usuario._id.toString()
     ) {
       return res.status(403).json({ success: false, error: 'No autorizado' });
     }
 
     if (req.user.rol === 'tutor') {
       if (
         req.user.hospital.toString() !== usuario.hospital._id.toString() ||
         (req.user.especialidad !== 'ALL' &&
           req.user.especialidad !== usuario.especialidad)
       ) {
         return res.status(403).json({ success: false, error: 'No autorizado' });
       }
     }
 
     if (
       req.user.rol === 'csm' &&
       req.user.zona !== usuario.hospital.zona
     ) {
       return res.status(403).json({ success: false, error: 'No autorizado' });
diff --git a/tests/descargarInformeCirugias.test.js b/tests/descargarInformeCirugias.test.js
index ef0654f9c1622cbfc02b1d0f9c1721d48b5232c1..7ffdaf5303456cf36b8b3a462b42dd9fed5c1fe1 100644
--- a/tests/descargarInformeCirugias.test.js
+++ b/tests/descargarInformeCirugias.test.js
@@ -1,75 +1,75 @@
 const { descargarInformeCirugias } = require('../src/controllers/informeCirugiasController');
 const ProgresoResidente = require('../src/models/ProgresoResidente');
 const fs = require('fs');
 
 describe('descargarInformeCirugias', () => {
   beforeEach(() => {
     jest.spyOn(fs, 'existsSync').mockReturnValue(true);
     jest.spyOn(fs, 'mkdirSync').mockImplementation(() => {});
     jest.spyOn(fs, 'unlink').mockImplementation((path, cb) => cb());
   });
 
   afterEach(() => {
     jest.restoreAllMocks();
   });
 
   test('returns 400 when phase not validated', async () => {
     const progreso = {
       _id: 'p1',
       estadoGeneral: 'en progreso',
       residente: {
         _id: 'u1',
-        tipo: 'Programa Residentes',
+        tipo: 'Programa Sociedades',
         hospital: { _id: 'h1', zona: 'NORTE' },
         especialidad: 'URO',
       },
       actividades: [],
       fase: { nombre: 'F1' },
     };
     const query = {
       populate: jest.fn().mockReturnThis(),
       then: (resolve) => Promise.resolve(resolve(progreso)),
     };
     jest.spyOn(ProgresoResidente, 'findById').mockReturnValue(query);
 
     const req = { params: { id: 'p1' }, user: { id: 'u1', rol: 'residente' } };
     const res = { status: jest.fn().mockReturnThis(), json: jest.fn() };
 
     await descargarInformeCirugias(req, res, jest.fn());
     expect(res.status).toHaveBeenCalledWith(400);
   });
 
   test('creates excel when validated', async () => {
     const progreso = {
       _id: 'p1',
       estadoGeneral: 'validado',
       residente: {
         _id: 'u1',
         nombre: 'A',
         apellidos: 'B',
-        tipo: 'Programa Residentes',
+        tipo: 'Programa Sociedades',
         hospital: { _id: 'h1', zona: 'NORTE' },
         especialidad: 'URO',
       },
       actividades: [
         {
           tipo: 'cirugia',
           nombre: 'Act1',
           estado: 'validado',
           fechaRealizacion: new Date('2025-01-01'),
           cirugia: { name: 'Proc1' },
           nombreCirujano: 'Dr X',
           porcentajeParticipacion: 50,
           comentariosResidente: 'com',
         },
       ],
       fase: { nombre: 'F1' },
     };
     const query = {
       populate: jest.fn().mockReturnThis(),
       then: (resolve) => Promise.resolve(resolve(progreso)),
     };
     jest.spyOn(ProgresoResidente, 'findById').mockReturnValue(query);
 
     const req = { params: { id: 'p1' }, user: { id: 'u1', rol: 'residente' } };
     const res = {
diff --git a/tests/informeCirugias.test.js b/tests/informeCirugias.test.js
index 8a6d9e8b2f158a67d1a2e471d1fdf6628452eae9..69715171d0225fa61b927983790184e0fbce2f32 100644
--- a/tests/informeCirugias.test.js
+++ b/tests/informeCirugias.test.js
@@ -33,27 +33,38 @@ app.get('/api/progreso/:faseId/informe-cirugias', (req, res) => {
   res.set('Content-Disposition', 'attachment; filename="informe-cirugias.csv"');
   res.download(TEMP_FILE, 'informe-cirugias.csv', () => {
     fs.unlinkSync(TEMP_FILE);
   });
 });
 
 describe('GET /api/progreso/:faseId/informe-cirugias', () => {
   test('404 cuando la fase no existe', async () => {
     const res = await request(app).get('/api/progreso/inexistente/informe-cirugias');
     expect(res.status).toBe(404);
   });
 
   test('400 cuando la fase no tiene cirug\u00edas validadas', async () => {
     const res = await request(app).get('/api/progreso/faseSinCirugias/informe-cirugias');
     expect(res.status).toBe(400);
   });
 
   test('200 y descarga cuando la fase es v\u00e1lida', async () => {
     expect(fs.existsSync(TEMP_FILE)).toBe(false);
     const res = await request(app).get('/api/progreso/faseValida/informe-cirugias');
     expect(res.status).toBe(200);
     expect(res.headers['content-disposition']).toContain('attachment');
     expect(res.headers['content-disposition']).toContain('informe-cirugias.csv');
     expect(fs.existsSync(TEMP_FILE)).toBe(false);
   });
+
+  test('200 y descarga para Programa Sociedades cuando la fase es v\u00e1lida', async () => {
+    expect(fs.existsSync(TEMP_FILE)).toBe(false);
+    const res = await request(app).get(
+      '/api/progreso/faseValida/informe-cirugias?tipo=Programa%20Sociedades'
+    );
+    expect(res.status).toBe(200);
+    expect(res.headers['content-disposition']).toContain('attachment');
+    expect(res.headers['content-disposition']).toContain('informe-cirugias.csv');
+    expect(fs.existsSync(TEMP_FILE)).toBe(false);
+  });
 });
 
