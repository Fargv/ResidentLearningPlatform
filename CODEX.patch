diff --git a/client/src/pages/dashboard/TutorUsuarios.tsx b/client/src/pages/dashboard/TutorUsuarios.tsx
index 73a87fa7dcff40716258e26dae76baa6a61c16bd..20f0fc373c8b5fae9e27434f225fc261c234b89b 100644
--- a/client/src/pages/dashboard/TutorUsuarios.tsx
+++ b/client/src/pages/dashboard/TutorUsuarios.tsx
@@ -1,73 +1,75 @@
 
 import React, { useState, useEffect, useCallback } from 'react';
 import {
   Box, Typography, Paper, Button, TextField,
   Dialog, DialogTitle, DialogContent, DialogActions,
   Table, TableBody, TableCell, TableContainer, TableHead, TableRow,
   IconButton, Chip, LinearProgress, Alert, Snackbar,
-  Autocomplete, Tooltip, CircularProgress, Backdrop
+  Autocomplete, Tooltip, CircularProgress, Backdrop, Menu, MenuItem
 } from '@mui/material';
 import { Add as AddIcon, Edit as EditIcon, Delete as DeleteIcon, Download as DownloadIcon } from '@mui/icons-material';
 import { useAuth } from '../../context/AuthContext';
 import { useTranslation } from 'react-i18next';
 import api from '../../api';
 import { getRoleChipSx } from '../../utils/roleChipColors';
 import { FaseCirugia } from '../../types/FaseCirugia';
 
 const TutorUsuarios: React.FC = () => {
   const { user } = useAuth();
   const { t } = useTranslation();
   const typeKey = (tipo?: string) =>
     tipo === 'Programa Sociedades'
       ? 'programaSociedades'
       : tipo === 'Programa Residentes'
       ? 'programaResidentes'
       : '';
   const [usuarios, setUsuarios] = useState<any[]>([]);
   const [loading, setLoading] = useState(true);
   const [error, setError] = useState<string | null>(null);
   const [procesando, setProcesando] = useState(false);
 
   const [openDialog, setOpenDialog] = useState(false);
   const [editar, setEditar] = useState(false);
   const [selected, setSelected] = useState<any>(null);
 
   const [formData, setFormData] = useState({
     email: '',
     nombre: '',
     apellidos: '',
     rol: user?.rol === 'profesor' ? 'participante' : 'residente',
     hospital: user?.hospital?._id || ''
   });
 
   const [snackbar, setSnackbar] = useState({
     open: false,
     message: '',
     severity: 'success' as 'success' | 'error'
   });
-  const [downloadLoading, setDownloadLoading] = useState(false);
+  const [downloadLoading, setDownloadLoading] = useState(false);
+  const [anchorElInforme, setAnchorElInforme] = useState<null | HTMLElement>(null);
+  const [menuUsuario, setMenuUsuario] = useState<any>(null);
 
   const [selectedRoles, setSelectedRoles] = useState<string[]>([]);
   const [selectedHospitals, setSelectedHospitals] = useState<string[]>([]);
   const [selectedZonas, setSelectedZonas] = useState<string[]>([]);
   const [selectedEspecialidades, setSelectedEspecialidades] = useState<string[]>([]);
   const [selectedTipos, setSelectedTipos] = useState<string[]>([]);
 
   const fetchUsuarios = useCallback(async () => {
     try {
       let res;
       if (user?.rol === 'csm') {
         res = await api.get('/users');
       } else if (user?.rol === 'profesor') {
         res = await api.get(`/users/profesor/${user._id}/participantes`);
       } else if (user?.hospital?._id) {
         res = await api.get(`/users/hospital/${user.hospital._id}`);
       }
       if (res) {
         const filtrados = res.data.data.filter(
           (u: any) => u._id !== user?._id && u.tipo === user?.tipo
         );
         const usuariosConProgreso = await Promise.all(
           filtrados.map(async (u: any) => {
             let fasesCirugia: FaseCirugia[] = [];
             if (["residente", "participante"].includes(u.rol)) {
diff --git a/client/src/pages/dashboard/TutorUsuarios.tsx b/client/src/pages/dashboard/TutorUsuarios.tsx
index 73a87fa7dcff40716258e26dae76baa6a61c16bd..20f0fc373c8b5fae9e27434f225fc261c234b89b 100644
--- a/client/src/pages/dashboard/TutorUsuarios.tsx
+++ b/client/src/pages/dashboard/TutorUsuarios.tsx
@@ -139,76 +141,90 @@ const TutorUsuarios: React.FC = () => {
     }
   };
 
   const handleDelete = async (usuarioId: string) => {
     try {
       setProcesando(true);
       await api.delete(`/users/${usuarioId}`);
 
       setUsuarios(usuarios.filter(u => u._id !== usuarioId));
       setSnackbar({
         open: true,
         message: t('tutorUsers.deleted'),
         severity: 'success'
       });
     } catch (err: any) {
       setSnackbar({
         open: true,
         message: err.response?.data?.error || t('tutorUsers.deleteError'),
         severity: 'error'
       });
     } finally {
       setProcesando(false);
     }
   };
 
-  const handleDownloadInforme = async (
-    progresoId: string,
-    fase: string,
-  ) => {
-    setDownloadLoading(true);
-    try {
-      const res = await api.get(`/informe-cirugias/${progresoId}`, {
-        responseType: 'blob',
-      });
+  const handleDownloadInforme = async (
+    progresoId: string,
+    fase: string,
+    usuario?: any,
+  ) => {
+    setDownloadLoading(true);
+    try {
+      const res = await api.get(`/informe-cirugias/${progresoId}`, {
+        responseType: 'blob',
+      });
       const url = window.URL.createObjectURL(new Blob([res.data]));
       const link = document.createElement('a');
       link.href = url;
       link.setAttribute('download', `informe-cirugias-${fase}.xlsx`);
       document.body.appendChild(link);
       link.click();
       link.remove();
     } catch (err: any) {
       setSnackbar({
         open: true,
         message: err.response?.data?.error || t('tutorUsers.loadError'),
         severity: 'error',
       });
     } finally {
-      setDownloadLoading(false);
-    }
-  };
+      setDownloadLoading(false);
+    }
+  };
+
+  const handleOpenInformeMenu = (
+    event: React.MouseEvent<HTMLButtonElement>,
+    usuario: any,
+  ) => {
+    setAnchorElInforme(event.currentTarget);
+    setMenuUsuario(usuario);
+  };
+
+  const handleCloseInformeMenu = () => {
+    setAnchorElInforme(null);
+    setMenuUsuario(null);
+  };
 
   const roleOptions = Array.from(
     new Set(usuarios.map((u) => u.rol).filter((r): r is string => Boolean(r))),
   );
   const hospitalOptions = Array.from(
     new Map(
       usuarios
         .filter((u) => u.hospital)
         .map((u) => [u.hospital._id, u.hospital]),
     ).values(),
   );
   const societyOptions = Array.from(
     new Map(
       usuarios
         .filter((u) => u.sociedad)
         .map((u) => [u.sociedad._id, u.sociedad]),
     ).values(),
   );
   const especialidadOptions = Array.from(
     new Set(
       usuarios
         .map((u) => u.especialidad)
         .filter((e): e is string => Boolean(e)),
     ),
   );
diff --git a/client/src/pages/dashboard/TutorUsuarios.tsx b/client/src/pages/dashboard/TutorUsuarios.tsx
index 73a87fa7dcff40716258e26dae76baa6a61c16bd..20f0fc373c8b5fae9e27434f225fc261c234b89b 100644
--- a/client/src/pages/dashboard/TutorUsuarios.tsx
+++ b/client/src/pages/dashboard/TutorUsuarios.tsx
@@ -406,73 +422,91 @@ const TutorUsuarios: React.FC = () => {
                         usuario.rol === 'administrador'
                           ? 'primary'
                           : usuario.rol === 'tutor'
                           ? 'secondary'
                           : 'default'
                       }
                       size="small"
                       sx={getRoleChipSx(usuario.rol)}
                     />
                   </TableCell>
                   <TableCell>{usuario.hospital?.nombre || '-'}</TableCell>
                   <TableCell>{usuario.especialidad || '-'}</TableCell>
                   <TableCell>{usuario.zona || '-'}</TableCell>
                   <TableCell>
                     <Chip
                       label={t(
                         usuario.activo
                           ? 'tutorUsers.states.active'
                           : 'tutorUsers.states.inactive'
                       )}
                       color={usuario.activo ? 'success' : 'error'}
                       size="small"
                     />
                   </TableCell>
                   <TableCell align="right">
-                    {usuario.fasesCirugia?.map((fase: FaseCirugia) => (
-                      <Tooltip
-                        key={fase.id}
-                        title={t(
-                          'tutorUsers.actions.downloadSurgeryReport',
-                          { phase: fase.fase },
-                        )}
-                      >
-                        <IconButton
-                          onClick={() =>
-                            handleDownloadInforme(fase.id, fase.fase)
-                          }
-                          sx={{ mr: 1 }}
-                        >
-                          <DownloadIcon />
-                        </IconButton>
-                      </Tooltip>
-                    ))}
-                    <IconButton
-                      onClick={() => {
-                        setEditar(true);
-                        setSelected(usuario);
-                        setFormData({
+                    {usuario.fasesCirugia && usuario.fasesCirugia.length > 0 && (
+                      <>
+                        <Tooltip title="Descargar informes">
+                          <IconButton
+                            onClick={(e) => handleOpenInformeMenu(e, usuario)}
+                            sx={{ mr: 1 }}
+                          >
+                            <DownloadIcon />
+                          </IconButton>
+                        </Tooltip>
+                        <Menu
+                          anchorEl={anchorElInforme}
+                          open={
+                            Boolean(anchorElInforme) &&
+                            menuUsuario?._id === usuario._id
+                          }
+                          onClose={handleCloseInformeMenu}
+                        >
+                          {menuUsuario?.fasesCirugia?.map((fase: FaseCirugia) => (
+                            <MenuItem
+                              key={fase.id}
+                              onClick={() => {
+                                handleDownloadInforme(
+                                  fase.id,
+                                  fase.fase,
+                                  menuUsuario,
+                                );
+                                handleCloseInformeMenu();
+                              }}
+                            >
+                              {fase.fase}
+                            </MenuItem>
+                          ))}
+                        </Menu>
+                      </>
+                    )}
+                    <IconButton
+                      onClick={() => {
+                        setEditar(true);
+                        setSelected(usuario);
+                        setFormData({
                           email: usuario.email,
                           nombre: usuario.nombre,
                           apellidos: usuario.apellidos,
                           rol: usuario.rol,
                           hospital: usuario.hospital?._id || ''
                         });
                         setOpenDialog(true);
                       }}
                     >
                       <EditIcon />
                     </IconButton>
                     <IconButton
                       color="error"
                       onClick={() => handleDelete(usuario._id)}
                     >
                       <DeleteIcon />
                     </IconButton>
                   </TableCell>
                 </TableRow>
               ))}
             </TableBody>
           </Table>
         </TableContainer>
       </Paper>
 
