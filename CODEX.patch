diff --git a/client/src/context/ColorModeContext.test.tsx b/client/src/context/ColorModeContext.test.tsx
index cbf8ffd0e18a6564a2c902e13888fc9851a10366..9cd2d6a614dcd6833a16ffa34bc1293db4cda6c9 100644
--- a/client/src/context/ColorModeContext.test.tsx
+++ b/client/src/context/ColorModeContext.test.tsx
@@ -1,39 +1,64 @@
 import React from 'react';
 import { render, screen, fireEvent } from '@testing-library/react';
+import { useTheme } from '@mui/material/styles';
 import { ColorModeProvider, useColorMode } from './ColorModeContext';
 
 const TestComponent = () => {
   const { mode, toggleColorMode } = useColorMode();
   return (
     <div>
       <span data-testid="mode">{mode}</span>
       <button onClick={toggleColorMode}>toggle</button>
     </div>
   );
 };
 
+const ThemeConsumer = () => {
+  const theme = useTheme();
+  return (
+    <span data-testid="info">
+      {theme.palette.info.main}-{theme.palette.info.contrastText}
+    </span>
+  );
+};
+
 beforeEach(() => {
   localStorage.clear();
 });
 
 test('default mode is light', () => {
   render(
     <ColorModeProvider>
       <TestComponent />
     </ColorModeProvider>
   );
   expect(screen.getByTestId('mode')).toHaveTextContent('light');
 });
 
 test('toggleColorMode switches mode and persists choice', () => {
   render(
     <ColorModeProvider>
       <TestComponent />
     </ColorModeProvider>
   );
 
   fireEvent.click(screen.getByText('toggle'));
 
   expect(screen.getByTestId('mode')).toHaveTextContent('dark');
   expect(localStorage.getItem('colorMode')).toBe('dark');
 });
+
+test('info palette updates with mode', () => {
+  render(
+    <ColorModeProvider>
+      <TestComponent />
+      <ThemeConsumer />
+    </ColorModeProvider>
+  );
+
+  expect(screen.getByTestId('info')).toHaveTextContent('#1976d2-#fff');
+
+  fireEvent.click(screen.getByText('toggle'));
+
+  expect(screen.getByTestId('info')).toHaveTextContent('#90caf9-#000');
+});
diff --git a/client/src/context/ColorModeContext.tsx b/client/src/context/ColorModeContext.tsx
index 2b5551077192c5ab6253f26ce34833a56ec8d76d..6122fd3330819f6036cdf270aaa3978d9f4d5684 100644
--- a/client/src/context/ColorModeContext.tsx
+++ b/client/src/context/ColorModeContext.tsx
@@ -26,51 +26,54 @@ const getInitialMode = (): PaletteMode => {
   } catch {
     return 'light';
   }
 };
 
 const getTheme = (mode: PaletteMode) =>
   createTheme({
     palette: {
       mode,
       primary: {
         main: '#1E5B94',
         light: '#4c7fb3',
         dark: '#153e67',
       },
       secondary: {
         main: '#6AB023',
         light: '#8cc94f',
         dark: '#4a7b18',
       },
       background: {
         default: mode === 'light' ? '#f5f5f5' : '#121212',
         paper: mode === 'light' ? '#ffffff' : '#1e1e1e',
       },
       error: { main: '#d32f2f' },
       warning: { main: '#ff9800' },
-      info: { main: '#1A2B3C' },
+      info: {
+        main: mode === 'light' ? '#1976d2' : '#90caf9',
+        contrastText: mode === 'light' ? '#fff' : '#000',
+      },
       success: { main: '#4caf50' },
     },
     typography: {
       fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif',
       h1: { fontWeight: 500 },
       h2: { fontWeight: 500 },
       h3: { fontWeight: 500 },
       h4: { fontWeight: 500 },
       h5: { fontWeight: 500 },
       h6: { fontWeight: 500 },
     },
     shape: { borderRadius: 8 },
     components: {
       MuiButton: {
         styleOverrides: {
           root: {
             textTransform: 'none',
             fontWeight: 500,
           },
         },
       },
       MuiCard: {
         styleOverrides: {
           root: {
             borderRadius: 8,
