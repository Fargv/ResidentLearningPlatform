diff --git a/tests/createUserAdmin.test.js b/tests/createUserAdmin.test.js
index 290b6d817b8d63617c9d037b05a070ddb1f7bdc3..247c94962ac662e07ae1a48522e6e6e9fa9b55dc 100644
--- a/tests/createUserAdmin.test.js
+++ b/tests/createUserAdmin.test.js
@@ -19,54 +19,80 @@ describe('createUser - administrador', () => {
   test('crea administrador sin tipo', async () => {
     jest.spyOn(User, 'create').mockResolvedValue({ _id: 'u1', rol: 'administrador' });
     const req = {
       body: {
         nombre: 'Admin',
         apellidos: 'Test',
         email: 'admin@test.com',
         password: 'pass',
         rol: 'administrador',
         tipo: 'invalido'
       },
       user: { _id: 'creator' },
       ip: '::1'
     };
     const res = { status: jest.fn().mockReturnThis(), json: jest.fn() };
 
     await createUser(req, res, jest.fn());
 
     expect(User.create).toHaveBeenCalledWith(
       expect.objectContaining({ rol: 'administrador', tipo: undefined })
     );
     expect(res.status).toHaveBeenCalledWith(201);
     expect(res.json).toHaveBeenCalledWith({ success: true, data: { _id: 'u1', rol: 'administrador' } });
   });
 
-  test('autoasigna tutor al crear residente sin especificarlo', async () => {
-    jest.spyOn(Hospital, 'findById').mockResolvedValue({ _id: 'h1', zona: 'NORTE' });
-    resolveTutor.mockResolvedValue('t1');
-    jest.spyOn(User, 'create').mockResolvedValue({ _id: 'u2', rol: 'residente', tutor: 't1' });
+  test('autoasigna tutor al crear residente sin especificarlo', async () => {
+    jest.spyOn(Hospital, 'findById').mockResolvedValue({ _id: 'h1', zona: 'NORTE' });
+    resolveTutor.mockResolvedValue('t1');
+    jest.spyOn(User, 'create').mockResolvedValue({ _id: 'u2', rol: 'residente', tutor: 't1' });
     const req = {
       body: {
         nombre: 'Res',
         apellidos: 'Test',
         email: 'res@test.com',
         password: 'pass',
         rol: 'residente',
         tipo: 'Programa Residentes',
         hospital: 'h1',
         especialidad: 'URO'
       },
       user: { _id: 'creator' },
       ip: '::1'
     };
     const res = { status: jest.fn().mockReturnThis(), json: jest.fn() };
 
     await createUser(req, res, jest.fn());
 
     expect(resolveTutor).toHaveBeenCalledWith('ALL', 'h1', 'URO');
-    expect(User.create).toHaveBeenCalledWith(
-      expect.objectContaining({ rol: 'residente', tutor: 't1' })
-    );
-    expect(inicializarProgresoFormativo).toHaveBeenCalled();
-  });
+    expect(User.create).toHaveBeenCalledWith(
+      expect.objectContaining({ rol: 'residente', tutor: 't1' })
+    );
+    expect(inicializarProgresoFormativo).toHaveBeenCalled();
+  });
+
+  test('crea participante en Programa Residentes', async () => {
+    jest
+      .spyOn(User, 'create')
+      .mockResolvedValue({ _id: 'u3', rol: 'participante', tipo: 'Programa Residentes' });
+    const req = {
+      body: {
+        nombre: 'Part',
+        apellidos: 'Test',
+        email: 'part@test.com',
+        password: 'pass',
+        rol: 'participante',
+        tipo: 'Programa Residentes'
+      },
+      user: { _id: 'creator' },
+      ip: '::1'
+    };
+    const res = { status: jest.fn().mockReturnThis(), json: jest.fn() };
+
+    await createUser(req, res, jest.fn());
+
+    expect(User.create).toHaveBeenCalledWith(
+      expect.objectContaining({ rol: 'participante', tipo: 'Programa Residentes' })
+    );
+    expect(inicializarProgresoFormativo).toHaveBeenCalled();
+  });
 });
