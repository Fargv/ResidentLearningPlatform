diff --git a/src/controllers/userController.js b/src/controllers/userController.js
index e4991971ad22b67e2c59ad7cf5222c46473e1435..ada7bda0eb20d4cd76310609d67e869bd6484229 100644
--- a/src/controllers/userController.js
+++ b/src/controllers/userController.js
@@ -1,38 +1,44 @@
 // userController.js COMPLETO CON INICIALIZACIÓN DEL PROGRESO
 const ErrorResponse = require('../utils/errorResponse');
 const User = require('../models/User');
 const Hospital = require('../models/Hospital');
 const Invitacion = require('../models/Invitacion');
 const crypto = require('crypto');
 const sendEmail = require('../utils/sendEmail');
 const { createAuditLog } = require('../utils/auditLog');
 const ProgresoResidente = require('../models/ProgresoResidente');
 const Sociedades = require('../models/Sociedades');
 const { inicializarProgresoFormativo } = require('../utils/initProgreso');
 const { Role } = require('../utils/roles');
-const { resolveTutor } = require('../utils/resolveTutor');
+
+const legacyRoles = {
+  formador: Role.TUTOR,
+  coordinador: Role.CSM,
+  instructor: Role.PROFESOR,
+  alumno: Role.PARTICIPANTE
+};
 
 
 
 
 // @desc    Obtener todos los usuarios (admin), usuarios del hospital (tutor)
 //         o participantes de la sociedad (profesor)
 // @route   GET /api/users
 // @access  Private/Admin|Tutor|CSM|Profesor
 exports.getUsers = async (req, res, next) => {
   try {
     let users;
 
     if (req.user.rol === Role.ADMINISTRADOR) {
       users = await User.find()
         .populate('hospital')
         .populate('sociedad')
         .populate('tutor', 'nombre apellidos');
     } else if (req.user.rol === Role.TUTOR) {
       const query = {
         hospital: req.user.hospital,
         rol: { $ne: Role.ADMINISTRADOR }
       };
       if (req.user.especialidad && req.user.especialidad !== 'ALL') {
         query.especialidad = req.user.especialidad;
       }
diff --git a/src/controllers/userController.js b/src/controllers/userController.js
index e4991971ad22b67e2c59ad7cf5222c46473e1435..ada7bda0eb20d4cd76310609d67e869bd6484229 100644
--- a/src/controllers/userController.js
+++ b/src/controllers/userController.js
@@ -67,63 +73,65 @@ exports.getUsers = async (req, res, next) => {
       users.map(async (u) => {
         const obj = u.toObject();
         if (u.rol === Role.RESIDENTE || u.rol === Role.PARTICIPANTE) {
           const existe = await ProgresoResidente.exists({ residente: u._id });
           obj.tieneProgreso = !!existe;
         }
         return obj;
       })
     );
 
     res.status(200).json({
       success: true,
       count: usersWithFlag.length,
       data: usersWithFlag
     });
   } catch (err) {
     next(err);
   }
 };
 
 // @desc    Crear un usuario desde administración
 // @route   POST /api/users
 // @access  Private/Admin
 exports.createUser = async (req, res, next) => {
   try {
-    const {
+    let {
       nombre,
       apellidos,
       email,
       password,
       rol,
       tipo,
       hospital,
       sociedad,
       especialidad,
       zona,
       tutor
     } = req.body;
+    rol = legacyRoles[rol] || rol;
+    req.body.rol = rol;
     const hospitalId = hospital || undefined;
     let especialidadVal;
     const tipoVal = rol === Role.ADMINISTRADOR ? undefined : tipo;
     const sociedadId =
       tipoVal === 'Programa Sociedades' ? sociedad || undefined : undefined;
     let zonaVal = zona || undefined;
 
     const rolesValidos = [
       Role.RESIDENTE,
       Role.TUTOR,
       Role.ADMINISTRADOR,
       Role.PARTICIPANTE,
       Role.PROFESOR,
       Role.CSM
     ];
     if (!rolesValidos.includes(rol)) {
       return next(new ErrorResponse('Rol inválido', 400));
     }
 
     // Verificar combinaciones válidas de rol y tipo de programa
     if (
       tipo === 'Programa Residentes' &&
       ![Role.RESIDENTE, Role.TUTOR, Role.ADMINISTRADOR, Role.CSM].includes(rol)
     ) {
       return next(new ErrorResponse('Rol inválido para el programa', 400));
diff --git a/src/controllers/userController.js b/src/controllers/userController.js
index e4991971ad22b67e2c59ad7cf5222c46473e1435..ada7bda0eb20d4cd76310609d67e869bd6484229 100644
--- a/src/controllers/userController.js
+++ b/src/controllers/userController.js
@@ -247,50 +255,54 @@ exports.getUser = async (req, res, next) => {
     const user = await User.findById(req.params.id)
       .populate('hospital')
       .populate('sociedad')
       .populate('tutor', 'nombre apellidos');
 
     if (!user) {
       return next(new ErrorResponse(`Usuario no encontrado con id ${req.params.id}`, 404));
     }
 
     res.status(200).json({
       success: true,
       data: user
     });
   } catch (err) {
     next(err);
   }
 };
 
 // @desc    Actualizar un usuario
 // @route   PUT /api/users/:id
 // @access  Private/Admin
 exports.updateUser = async (req, res, next) => {
   try {
     // Eliminar campos que no deben ser actualizados por esta ruta
     const { password, tutor: tutorInput, ...updateData } = req.body;
+    if (updateData.rol) {
+      updateData.rol = legacyRoles[updateData.rol] || updateData.rol;
+      req.body.rol = updateData.rol;
+    }
     const hospitalId = updateData.hospital || undefined;
     let zonaVal = updateData.zona || undefined;
     const currentUser = await User.findById(req.params.id);
     if (!currentUser) {
       return next(
         new ErrorResponse(`Usuario no encontrado con id ${req.params.id}`, 404)
       );
     }
 
     if (req.user.rol === Role.PROFESOR) {
       if (
         currentUser.rol !== Role.PARTICIPANTE ||
         !currentUser.sociedad ||
         currentUser.sociedad.toString() !== req.user.sociedad.toString()
       ) {
         return next(
           new ErrorResponse('No autorizado para modificar este usuario', 403)
         );
       }
       if (updateData.rol && updateData.rol !== Role.PARTICIPANTE) {
         return next(
           new ErrorResponse('No autorizado para cambiar el rol del usuario', 403)
         );
       }
       if (
